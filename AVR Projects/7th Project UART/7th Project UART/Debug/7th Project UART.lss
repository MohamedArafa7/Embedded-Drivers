
7th Project UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000068c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000006e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000006e0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000710  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000001d0  00000000  00000000  0000074c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000013fa  00000000  00000000  0000091c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008eb  00000000  00000000  00001d16  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009e8  00000000  00000000  00002601  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000394  00000000  00000000  00002fec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000518  00000000  00000000  00003380  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000750  00000000  00000000  00003898  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000190  00000000  00000000  00003fe8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__vector_13>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 cc 00 	call	0x198	; 0x198 <main>
  64:	0c 94 44 03 	jmp	0x688	; 0x688 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <SetPin_C>:
		break;
		case out_pin:
		DDRB |= 1<<PinNum;
		break;
		default:
		DDRB &= ~(1<<PinNum);
  6c:	95 b3       	in	r25, 0x15	; 21
  6e:	21 e0       	ldi	r18, 0x01	; 1
  70:	30 e0       	ldi	r19, 0x00	; 0
  72:	02 c0       	rjmp	.+4      	; 0x78 <SetPin_C+0xc>
  74:	22 0f       	add	r18, r18
  76:	33 1f       	adc	r19, r19
  78:	8a 95       	dec	r24
  7a:	e2 f7       	brpl	.-8      	; 0x74 <SetPin_C+0x8>
  7c:	29 2b       	or	r18, r25
  7e:	25 bb       	out	0x15, r18	; 21
  80:	08 95       	ret

00000082 <ReSetPin_C>:
  82:	95 b3       	in	r25, 0x15	; 21
  84:	21 e0       	ldi	r18, 0x01	; 1
  86:	30 e0       	ldi	r19, 0x00	; 0
  88:	02 c0       	rjmp	.+4      	; 0x8e <ReSetPin_C+0xc>
  8a:	22 0f       	add	r18, r18
  8c:	33 1f       	adc	r19, r19
  8e:	8a 95       	dec	r24
  90:	e2 f7       	brpl	.-8      	; 0x8a <ReSetPin_C+0x8>
  92:	20 95       	com	r18
  94:	29 23       	and	r18, r25
  96:	25 bb       	out	0x15, r18	; 21
  98:	08 95       	ret

0000009a <Dir_C>:
	}
}
void Dir_C(char state,int PinNum)
{
	switch(state)
  9a:	88 23       	and	r24, r24
  9c:	19 f0       	breq	.+6      	; 0xa4 <Dir_C+0xa>
  9e:	81 30       	cpi	r24, 0x01	; 1
  a0:	69 f0       	breq	.+26     	; 0xbc <Dir_C+0x22>
  a2:	17 c0       	rjmp	.+46     	; 0xd2 <Dir_C+0x38>
	{
		case in_pin:
		DDRC &= ~(1<<PinNum);
  a4:	24 b3       	in	r18, 0x14	; 20
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <Dir_C+0x16>
  ac:	88 0f       	add	r24, r24
  ae:	99 1f       	adc	r25, r25
  b0:	6a 95       	dec	r22
  b2:	e2 f7       	brpl	.-8      	; 0xac <Dir_C+0x12>
  b4:	80 95       	com	r24
  b6:	82 23       	and	r24, r18
  b8:	84 bb       	out	0x14, r24	; 20
		break;
  ba:	08 95       	ret
		case out_pin:
		DDRC |= 1<<PinNum;
  bc:	24 b3       	in	r18, 0x14	; 20
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <Dir_C+0x2e>
  c4:	88 0f       	add	r24, r24
  c6:	99 1f       	adc	r25, r25
  c8:	6a 95       	dec	r22
  ca:	e2 f7       	brpl	.-8      	; 0xc4 <Dir_C+0x2a>
  cc:	82 2b       	or	r24, r18
  ce:	84 bb       	out	0x14, r24	; 20
		break;
  d0:	08 95       	ret
		default:
		DDRC &= ~(1<<PinNum);
  d2:	24 b3       	in	r18, 0x14	; 20
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	02 c0       	rjmp	.+4      	; 0xde <Dir_C+0x44>
  da:	88 0f       	add	r24, r24
  dc:	99 1f       	adc	r25, r25
  de:	6a 95       	dec	r22
  e0:	e2 f7       	brpl	.-8      	; 0xda <Dir_C+0x40>
  e2:	80 95       	com	r24
  e4:	82 23       	and	r24, r18
  e6:	84 bb       	out	0x14, r24	; 20
  e8:	08 95       	ret

000000ea <Dir_D>:
	}
}
void Dir_D(char state,int PinNum)
{
	switch(state)
  ea:	88 23       	and	r24, r24
  ec:	19 f0       	breq	.+6      	; 0xf4 <Dir_D+0xa>
  ee:	81 30       	cpi	r24, 0x01	; 1
  f0:	69 f0       	breq	.+26     	; 0x10c <Dir_D+0x22>
  f2:	17 c0       	rjmp	.+46     	; 0x122 <Dir_D+0x38>
	{
		case in_pin:
		DDRD &= ~(1<<PinNum);
  f4:	21 b3       	in	r18, 0x11	; 17
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	02 c0       	rjmp	.+4      	; 0x100 <Dir_D+0x16>
  fc:	88 0f       	add	r24, r24
  fe:	99 1f       	adc	r25, r25
 100:	6a 95       	dec	r22
 102:	e2 f7       	brpl	.-8      	; 0xfc <Dir_D+0x12>
 104:	80 95       	com	r24
 106:	82 23       	and	r24, r18
 108:	81 bb       	out	0x11, r24	; 17
		break;
 10a:	08 95       	ret
		case out_pin:
		DDRD |= 1<<PinNum;
 10c:	21 b3       	in	r18, 0x11	; 17
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	02 c0       	rjmp	.+4      	; 0x118 <Dir_D+0x2e>
 114:	88 0f       	add	r24, r24
 116:	99 1f       	adc	r25, r25
 118:	6a 95       	dec	r22
 11a:	e2 f7       	brpl	.-8      	; 0x114 <Dir_D+0x2a>
 11c:	82 2b       	or	r24, r18
 11e:	81 bb       	out	0x11, r24	; 17
		break;
 120:	08 95       	ret
		default:
		DDRD &= ~(1<<PinNum);
 122:	21 b3       	in	r18, 0x11	; 17
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	02 c0       	rjmp	.+4      	; 0x12e <Dir_D+0x44>
 12a:	88 0f       	add	r24, r24
 12c:	99 1f       	adc	r25, r25
 12e:	6a 95       	dec	r22
 130:	e2 f7       	brpl	.-8      	; 0x12a <Dir_D+0x40>
 132:	80 95       	com	r24
 134:	82 23       	and	r24, r18
 136:	81 bb       	out	0x11, r24	; 17
 138:	08 95       	ret

0000013a <__vector_13>:
#include "UART.h"
#include <avr/interrupt.h>
#include "GPIO.h"

ISR(USART_RXC_vect)
{
 13a:	1f 92       	push	r1
 13c:	0f 92       	push	r0
 13e:	0f b6       	in	r0, 0x3f	; 63
 140:	0f 92       	push	r0
 142:	11 24       	eor	r1, r1
 144:	2f 93       	push	r18
 146:	3f 93       	push	r19
 148:	4f 93       	push	r20
 14a:	5f 93       	push	r21
 14c:	6f 93       	push	r22
 14e:	7f 93       	push	r23
 150:	8f 93       	push	r24
 152:	9f 93       	push	r25
 154:	af 93       	push	r26
 156:	bf 93       	push	r27
 158:	ef 93       	push	r30
 15a:	ff 93       	push	r31
	char data = UDR;
 15c:	8c b1       	in	r24, 0x0c	; 12
	switch (data)
 15e:	81 34       	cpi	r24, 0x41	; 65
 160:	19 f0       	breq	.+6      	; 0x168 <__vector_13+0x2e>
 162:	82 34       	cpi	r24, 0x42	; 66
 164:	29 f0       	breq	.+10     	; 0x170 <__vector_13+0x36>
 166:	07 c0       	rjmp	.+14     	; 0x176 <__vector_13+0x3c>
	{
		case 'A':
			//PORTA = 0xFF;
			_Led0(ON);
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	0e 94 ff 00 	call	0x1fe	; 0x1fe <_Led0>
			break;
 16e:	03 c0       	rjmp	.+6      	; 0x176 <__vector_13+0x3c>
		case 'B':
			//PORTA = 0;
			_Led0(OFF);
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	0e 94 ff 00 	call	0x1fe	; 0x1fe <_Led0>
			break;
		default:
			//PORTA = 0;
			break;
	}
}
 176:	ff 91       	pop	r31
 178:	ef 91       	pop	r30
 17a:	bf 91       	pop	r27
 17c:	af 91       	pop	r26
 17e:	9f 91       	pop	r25
 180:	8f 91       	pop	r24
 182:	7f 91       	pop	r23
 184:	6f 91       	pop	r22
 186:	5f 91       	pop	r21
 188:	4f 91       	pop	r20
 18a:	3f 91       	pop	r19
 18c:	2f 91       	pop	r18
 18e:	0f 90       	pop	r0
 190:	0f be       	out	0x3f, r0	; 63
 192:	0f 90       	pop	r0
 194:	1f 90       	pop	r1
 196:	18 95       	reti

00000198 <main>:
int main(void)
{
    /* Replace with your application code */
	UART_Init(9600);
 198:	80 e8       	ldi	r24, 0x80	; 128
 19a:	95 e2       	ldi	r25, 0x25	; 37
 19c:	0e 94 30 01 	call	0x260	; 0x260 <UART_Init>
	//Config_A(out_Port);
	LEDInit();
 1a0:	0e 94 ef 00 	call	0x1de	; 0x1de <LEDInit>
	_Led0(OFF);
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	0e 94 ff 00 	call	0x1fe	; 0x1fe <_Led0>
	
	//int x = 0;
	sei();
 1aa:	78 94       	sei
    while (1) 
    {
		UART_Data('A');
 1ac:	81 e4       	ldi	r24, 0x41	; 65
 1ae:	0e 94 37 01 	call	0x26e	; 0x26e <UART_Data>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b2:	2f ef       	ldi	r18, 0xFF	; 255
 1b4:	87 ea       	ldi	r24, 0xA7	; 167
 1b6:	91 e6       	ldi	r25, 0x61	; 97
 1b8:	21 50       	subi	r18, 0x01	; 1
 1ba:	80 40       	sbci	r24, 0x00	; 0
 1bc:	90 40       	sbci	r25, 0x00	; 0
 1be:	e1 f7       	brne	.-8      	; 0x1b8 <main+0x20>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <main+0x2a>
 1c2:	00 00       	nop
		_delay_ms(2000);
		UART_Data('B');
 1c4:	82 e4       	ldi	r24, 0x42	; 66
 1c6:	0e 94 37 01 	call	0x26e	; 0x26e <UART_Data>
 1ca:	2f ef       	ldi	r18, 0xFF	; 255
 1cc:	87 ea       	ldi	r24, 0xA7	; 167
 1ce:	91 e6       	ldi	r25, 0x61	; 97
 1d0:	21 50       	subi	r18, 0x01	; 1
 1d2:	80 40       	sbci	r24, 0x00	; 0
 1d4:	90 40       	sbci	r25, 0x00	; 0
 1d6:	e1 f7       	brne	.-8      	; 0x1d0 <main+0x38>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <main+0x42>
 1da:	00 00       	nop
 1dc:	e7 cf       	rjmp	.-50     	; 0x1ac <main+0x14>

000001de <LEDInit>:
}


void LEDInit(void)
{
	Dir_C(out_pin,LEDC0);
 1de:	62 e0       	ldi	r22, 0x02	; 2
 1e0:	70 e0       	ldi	r23, 0x00	; 0
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	0e 94 4d 00 	call	0x9a	; 0x9a <Dir_C>
	Dir_C(out_pin,LEDC1);
 1e8:	67 e0       	ldi	r22, 0x07	; 7
 1ea:	70 e0       	ldi	r23, 0x00	; 0
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	0e 94 4d 00 	call	0x9a	; 0x9a <Dir_C>
	Dir_D(out_pin,LEDD2);
 1f2:	63 e0       	ldi	r22, 0x03	; 3
 1f4:	70 e0       	ldi	r23, 0x00	; 0
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	0e 94 75 00 	call	0xea	; 0xea <Dir_D>
 1fc:	08 95       	ret

000001fe <_Led0>:
}
void _Led0(char state)
{
	switch(state)
 1fe:	88 23       	and	r24, r24
 200:	39 f0       	breq	.+14     	; 0x210 <_Led0+0x12>
 202:	81 30       	cpi	r24, 0x01	; 1
 204:	51 f4       	brne	.+20     	; 0x21a <_Led0+0x1c>
	{
		case ON:
		SetPin_C(LEDC0);
 206:	82 e0       	ldi	r24, 0x02	; 2
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	0e 94 36 00 	call	0x6c	; 0x6c <SetPin_C>
		break;
 20e:	08 95       	ret
		case OFF:
		ReSetPin_C(LEDC0);
 210:	82 e0       	ldi	r24, 0x02	; 2
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	0e 94 41 00 	call	0x82	; 0x82 <ReSetPin_C>
		break;
 218:	08 95       	ret
		default:
		ReSetPin_C(LEDC0);
 21a:	82 e0       	ldi	r24, 0x02	; 2
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	0e 94 41 00 	call	0x82	; 0x82 <ReSetPin_C>
 222:	08 95       	ret

00000224 <UART_BaudRate>:
	
		
}
void UART_BaudRate(unsigned int rate)
{
	unsigned int BR = (F_CPU/(16.0 * rate))-1;
 224:	bc 01       	movw	r22, r24
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	0e 94 49 02 	call	0x492	; 0x492 <__floatunsisf>
 22e:	20 e0       	ldi	r18, 0x00	; 0
 230:	30 e0       	ldi	r19, 0x00	; 0
 232:	40 e8       	ldi	r20, 0x80	; 128
 234:	51 e4       	ldi	r21, 0x41	; 65
 236:	0e 94 d7 02 	call	0x5ae	; 0x5ae <__mulsf3>
 23a:	9b 01       	movw	r18, r22
 23c:	ac 01       	movw	r20, r24
 23e:	60 e0       	ldi	r22, 0x00	; 0
 240:	74 e2       	ldi	r23, 0x24	; 36
 242:	84 e7       	ldi	r24, 0x74	; 116
 244:	9b e4       	ldi	r25, 0x4B	; 75
 246:	0e 94 a8 01 	call	0x350	; 0x350 <__divsf3>
 24a:	20 e0       	ldi	r18, 0x00	; 0
 24c:	30 e0       	ldi	r19, 0x00	; 0
 24e:	40 e8       	ldi	r20, 0x80	; 128
 250:	5f e3       	ldi	r21, 0x3F	; 63
 252:	0e 94 3b 01 	call	0x276	; 0x276 <__subsf3>
 256:	0e 94 1a 02 	call	0x434	; 0x434 <__fixunssfsi>
	UBRRL = (char)BR;
 25a:	69 b9       	out	0x09, r22	; 9
	UBRRH = (BR >> 8);
 25c:	70 bd       	out	0x20, r23	; 32
 25e:	08 95       	ret

00000260 <UART_Init>:
#include "UART.h"
#include <stdlib.h>

void UART_Init(unsigned int BR)
{
	UART_BaudRate(BR);
 260:	0e 94 12 01 	call	0x224	; 0x224 <UART_BaudRate>
	UCSRB |= (1<<TXEN) | (1<<RXEN);
 264:	8a b1       	in	r24, 0x0a	; 10
 266:	88 61       	ori	r24, 0x18	; 24
 268:	8a b9       	out	0x0a, r24	; 10
	UCSRB |= 1<<RXCIE; /// Optional
 26a:	57 9a       	sbi	0x0a, 7	; 10
 26c:	08 95       	ret

0000026e <UART_Data>:
	UBRRL = (char)BR;
	UBRRH = (BR >> 8);
}
void UART_Data(char data)
{
	while (!(UCSRA & (1 << UDRE) ) );
 26e:	5d 9b       	sbis	0x0b, 5	; 11
 270:	fe cf       	rjmp	.-4      	; 0x26e <UART_Data>
	UDR = data;
 272:	8c b9       	out	0x0c, r24	; 12
 274:	08 95       	ret

00000276 <__subsf3>:
 276:	50 58       	subi	r21, 0x80	; 128

00000278 <__addsf3>:
 278:	bb 27       	eor	r27, r27
 27a:	aa 27       	eor	r26, r26
 27c:	0e 94 53 01 	call	0x2a6	; 0x2a6 <__addsf3x>
 280:	0c 94 9d 02 	jmp	0x53a	; 0x53a <__fp_round>
 284:	0e 94 8f 02 	call	0x51e	; 0x51e <__fp_pscA>
 288:	38 f0       	brcs	.+14     	; 0x298 <__addsf3+0x20>
 28a:	0e 94 96 02 	call	0x52c	; 0x52c <__fp_pscB>
 28e:	20 f0       	brcs	.+8      	; 0x298 <__addsf3+0x20>
 290:	39 f4       	brne	.+14     	; 0x2a0 <__addsf3+0x28>
 292:	9f 3f       	cpi	r25, 0xFF	; 255
 294:	19 f4       	brne	.+6      	; 0x29c <__addsf3+0x24>
 296:	26 f4       	brtc	.+8      	; 0x2a0 <__addsf3+0x28>
 298:	0c 94 8c 02 	jmp	0x518	; 0x518 <__fp_nan>
 29c:	0e f4       	brtc	.+2      	; 0x2a0 <__addsf3+0x28>
 29e:	e0 95       	com	r30
 2a0:	e7 fb       	bst	r30, 7
 2a2:	0c 94 86 02 	jmp	0x50c	; 0x50c <__fp_inf>

000002a6 <__addsf3x>:
 2a6:	e9 2f       	mov	r30, r25
 2a8:	0e 94 ae 02 	call	0x55c	; 0x55c <__fp_split3>
 2ac:	58 f3       	brcs	.-42     	; 0x284 <__addsf3+0xc>
 2ae:	ba 17       	cp	r27, r26
 2b0:	62 07       	cpc	r22, r18
 2b2:	73 07       	cpc	r23, r19
 2b4:	84 07       	cpc	r24, r20
 2b6:	95 07       	cpc	r25, r21
 2b8:	20 f0       	brcs	.+8      	; 0x2c2 <__addsf3x+0x1c>
 2ba:	79 f4       	brne	.+30     	; 0x2da <__addsf3x+0x34>
 2bc:	a6 f5       	brtc	.+104    	; 0x326 <__addsf3x+0x80>
 2be:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__fp_zero>
 2c2:	0e f4       	brtc	.+2      	; 0x2c6 <__addsf3x+0x20>
 2c4:	e0 95       	com	r30
 2c6:	0b 2e       	mov	r0, r27
 2c8:	ba 2f       	mov	r27, r26
 2ca:	a0 2d       	mov	r26, r0
 2cc:	0b 01       	movw	r0, r22
 2ce:	b9 01       	movw	r22, r18
 2d0:	90 01       	movw	r18, r0
 2d2:	0c 01       	movw	r0, r24
 2d4:	ca 01       	movw	r24, r20
 2d6:	a0 01       	movw	r20, r0
 2d8:	11 24       	eor	r1, r1
 2da:	ff 27       	eor	r31, r31
 2dc:	59 1b       	sub	r21, r25
 2de:	99 f0       	breq	.+38     	; 0x306 <__addsf3x+0x60>
 2e0:	59 3f       	cpi	r21, 0xF9	; 249
 2e2:	50 f4       	brcc	.+20     	; 0x2f8 <__addsf3x+0x52>
 2e4:	50 3e       	cpi	r21, 0xE0	; 224
 2e6:	68 f1       	brcs	.+90     	; 0x342 <__addsf3x+0x9c>
 2e8:	1a 16       	cp	r1, r26
 2ea:	f0 40       	sbci	r31, 0x00	; 0
 2ec:	a2 2f       	mov	r26, r18
 2ee:	23 2f       	mov	r18, r19
 2f0:	34 2f       	mov	r19, r20
 2f2:	44 27       	eor	r20, r20
 2f4:	58 5f       	subi	r21, 0xF8	; 248
 2f6:	f3 cf       	rjmp	.-26     	; 0x2de <__addsf3x+0x38>
 2f8:	46 95       	lsr	r20
 2fa:	37 95       	ror	r19
 2fc:	27 95       	ror	r18
 2fe:	a7 95       	ror	r26
 300:	f0 40       	sbci	r31, 0x00	; 0
 302:	53 95       	inc	r21
 304:	c9 f7       	brne	.-14     	; 0x2f8 <__addsf3x+0x52>
 306:	7e f4       	brtc	.+30     	; 0x326 <__addsf3x+0x80>
 308:	1f 16       	cp	r1, r31
 30a:	ba 0b       	sbc	r27, r26
 30c:	62 0b       	sbc	r22, r18
 30e:	73 0b       	sbc	r23, r19
 310:	84 0b       	sbc	r24, r20
 312:	ba f0       	brmi	.+46     	; 0x342 <__addsf3x+0x9c>
 314:	91 50       	subi	r25, 0x01	; 1
 316:	a1 f0       	breq	.+40     	; 0x340 <__addsf3x+0x9a>
 318:	ff 0f       	add	r31, r31
 31a:	bb 1f       	adc	r27, r27
 31c:	66 1f       	adc	r22, r22
 31e:	77 1f       	adc	r23, r23
 320:	88 1f       	adc	r24, r24
 322:	c2 f7       	brpl	.-16     	; 0x314 <__addsf3x+0x6e>
 324:	0e c0       	rjmp	.+28     	; 0x342 <__addsf3x+0x9c>
 326:	ba 0f       	add	r27, r26
 328:	62 1f       	adc	r22, r18
 32a:	73 1f       	adc	r23, r19
 32c:	84 1f       	adc	r24, r20
 32e:	48 f4       	brcc	.+18     	; 0x342 <__addsf3x+0x9c>
 330:	87 95       	ror	r24
 332:	77 95       	ror	r23
 334:	67 95       	ror	r22
 336:	b7 95       	ror	r27
 338:	f7 95       	ror	r31
 33a:	9e 3f       	cpi	r25, 0xFE	; 254
 33c:	08 f0       	brcs	.+2      	; 0x340 <__addsf3x+0x9a>
 33e:	b0 cf       	rjmp	.-160    	; 0x2a0 <__addsf3+0x28>
 340:	93 95       	inc	r25
 342:	88 0f       	add	r24, r24
 344:	08 f0       	brcs	.+2      	; 0x348 <__addsf3x+0xa2>
 346:	99 27       	eor	r25, r25
 348:	ee 0f       	add	r30, r30
 34a:	97 95       	ror	r25
 34c:	87 95       	ror	r24
 34e:	08 95       	ret

00000350 <__divsf3>:
 350:	0e 94 bc 01 	call	0x378	; 0x378 <__divsf3x>
 354:	0c 94 9d 02 	jmp	0x53a	; 0x53a <__fp_round>
 358:	0e 94 96 02 	call	0x52c	; 0x52c <__fp_pscB>
 35c:	58 f0       	brcs	.+22     	; 0x374 <__divsf3+0x24>
 35e:	0e 94 8f 02 	call	0x51e	; 0x51e <__fp_pscA>
 362:	40 f0       	brcs	.+16     	; 0x374 <__divsf3+0x24>
 364:	29 f4       	brne	.+10     	; 0x370 <__divsf3+0x20>
 366:	5f 3f       	cpi	r21, 0xFF	; 255
 368:	29 f0       	breq	.+10     	; 0x374 <__divsf3+0x24>
 36a:	0c 94 86 02 	jmp	0x50c	; 0x50c <__fp_inf>
 36e:	51 11       	cpse	r21, r1
 370:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__fp_szero>
 374:	0c 94 8c 02 	jmp	0x518	; 0x518 <__fp_nan>

00000378 <__divsf3x>:
 378:	0e 94 ae 02 	call	0x55c	; 0x55c <__fp_split3>
 37c:	68 f3       	brcs	.-38     	; 0x358 <__divsf3+0x8>

0000037e <__divsf3_pse>:
 37e:	99 23       	and	r25, r25
 380:	b1 f3       	breq	.-20     	; 0x36e <__divsf3+0x1e>
 382:	55 23       	and	r21, r21
 384:	91 f3       	breq	.-28     	; 0x36a <__divsf3+0x1a>
 386:	95 1b       	sub	r25, r21
 388:	55 0b       	sbc	r21, r21
 38a:	bb 27       	eor	r27, r27
 38c:	aa 27       	eor	r26, r26
 38e:	62 17       	cp	r22, r18
 390:	73 07       	cpc	r23, r19
 392:	84 07       	cpc	r24, r20
 394:	38 f0       	brcs	.+14     	; 0x3a4 <__divsf3_pse+0x26>
 396:	9f 5f       	subi	r25, 0xFF	; 255
 398:	5f 4f       	sbci	r21, 0xFF	; 255
 39a:	22 0f       	add	r18, r18
 39c:	33 1f       	adc	r19, r19
 39e:	44 1f       	adc	r20, r20
 3a0:	aa 1f       	adc	r26, r26
 3a2:	a9 f3       	breq	.-22     	; 0x38e <__divsf3_pse+0x10>
 3a4:	35 d0       	rcall	.+106    	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 3a6:	0e 2e       	mov	r0, r30
 3a8:	3a f0       	brmi	.+14     	; 0x3b8 <__divsf3_pse+0x3a>
 3aa:	e0 e8       	ldi	r30, 0x80	; 128
 3ac:	32 d0       	rcall	.+100    	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 3ae:	91 50       	subi	r25, 0x01	; 1
 3b0:	50 40       	sbci	r21, 0x00	; 0
 3b2:	e6 95       	lsr	r30
 3b4:	00 1c       	adc	r0, r0
 3b6:	ca f7       	brpl	.-14     	; 0x3aa <__divsf3_pse+0x2c>
 3b8:	2b d0       	rcall	.+86     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 3ba:	fe 2f       	mov	r31, r30
 3bc:	29 d0       	rcall	.+82     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 3be:	66 0f       	add	r22, r22
 3c0:	77 1f       	adc	r23, r23
 3c2:	88 1f       	adc	r24, r24
 3c4:	bb 1f       	adc	r27, r27
 3c6:	26 17       	cp	r18, r22
 3c8:	37 07       	cpc	r19, r23
 3ca:	48 07       	cpc	r20, r24
 3cc:	ab 07       	cpc	r26, r27
 3ce:	b0 e8       	ldi	r27, 0x80	; 128
 3d0:	09 f0       	breq	.+2      	; 0x3d4 <__divsf3_pse+0x56>
 3d2:	bb 0b       	sbc	r27, r27
 3d4:	80 2d       	mov	r24, r0
 3d6:	bf 01       	movw	r22, r30
 3d8:	ff 27       	eor	r31, r31
 3da:	93 58       	subi	r25, 0x83	; 131
 3dc:	5f 4f       	sbci	r21, 0xFF	; 255
 3de:	3a f0       	brmi	.+14     	; 0x3ee <__divsf3_pse+0x70>
 3e0:	9e 3f       	cpi	r25, 0xFE	; 254
 3e2:	51 05       	cpc	r21, r1
 3e4:	78 f0       	brcs	.+30     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3e6:	0c 94 86 02 	jmp	0x50c	; 0x50c <__fp_inf>
 3ea:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__fp_szero>
 3ee:	5f 3f       	cpi	r21, 0xFF	; 255
 3f0:	e4 f3       	brlt	.-8      	; 0x3ea <__divsf3_pse+0x6c>
 3f2:	98 3e       	cpi	r25, 0xE8	; 232
 3f4:	d4 f3       	brlt	.-12     	; 0x3ea <__divsf3_pse+0x6c>
 3f6:	86 95       	lsr	r24
 3f8:	77 95       	ror	r23
 3fa:	67 95       	ror	r22
 3fc:	b7 95       	ror	r27
 3fe:	f7 95       	ror	r31
 400:	9f 5f       	subi	r25, 0xFF	; 255
 402:	c9 f7       	brne	.-14     	; 0x3f6 <__divsf3_pse+0x78>
 404:	88 0f       	add	r24, r24
 406:	91 1d       	adc	r25, r1
 408:	96 95       	lsr	r25
 40a:	87 95       	ror	r24
 40c:	97 f9       	bld	r25, 7
 40e:	08 95       	ret
 410:	e1 e0       	ldi	r30, 0x01	; 1
 412:	66 0f       	add	r22, r22
 414:	77 1f       	adc	r23, r23
 416:	88 1f       	adc	r24, r24
 418:	bb 1f       	adc	r27, r27
 41a:	62 17       	cp	r22, r18
 41c:	73 07       	cpc	r23, r19
 41e:	84 07       	cpc	r24, r20
 420:	ba 07       	cpc	r27, r26
 422:	20 f0       	brcs	.+8      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 424:	62 1b       	sub	r22, r18
 426:	73 0b       	sbc	r23, r19
 428:	84 0b       	sbc	r24, r20
 42a:	ba 0b       	sbc	r27, r26
 42c:	ee 1f       	adc	r30, r30
 42e:	88 f7       	brcc	.-30     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 430:	e0 95       	com	r30
 432:	08 95       	ret

00000434 <__fixunssfsi>:
 434:	0e 94 b6 02 	call	0x56c	; 0x56c <__fp_splitA>
 438:	88 f0       	brcs	.+34     	; 0x45c <__fixunssfsi+0x28>
 43a:	9f 57       	subi	r25, 0x7F	; 127
 43c:	98 f0       	brcs	.+38     	; 0x464 <__fixunssfsi+0x30>
 43e:	b9 2f       	mov	r27, r25
 440:	99 27       	eor	r25, r25
 442:	b7 51       	subi	r27, 0x17	; 23
 444:	b0 f0       	brcs	.+44     	; 0x472 <__fixunssfsi+0x3e>
 446:	e1 f0       	breq	.+56     	; 0x480 <__fixunssfsi+0x4c>
 448:	66 0f       	add	r22, r22
 44a:	77 1f       	adc	r23, r23
 44c:	88 1f       	adc	r24, r24
 44e:	99 1f       	adc	r25, r25
 450:	1a f0       	brmi	.+6      	; 0x458 <__fixunssfsi+0x24>
 452:	ba 95       	dec	r27
 454:	c9 f7       	brne	.-14     	; 0x448 <__fixunssfsi+0x14>
 456:	14 c0       	rjmp	.+40     	; 0x480 <__fixunssfsi+0x4c>
 458:	b1 30       	cpi	r27, 0x01	; 1
 45a:	91 f0       	breq	.+36     	; 0x480 <__fixunssfsi+0x4c>
 45c:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <__fp_zero>
 460:	b1 e0       	ldi	r27, 0x01	; 1
 462:	08 95       	ret
 464:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__fp_zero>
 468:	67 2f       	mov	r22, r23
 46a:	78 2f       	mov	r23, r24
 46c:	88 27       	eor	r24, r24
 46e:	b8 5f       	subi	r27, 0xF8	; 248
 470:	39 f0       	breq	.+14     	; 0x480 <__fixunssfsi+0x4c>
 472:	b9 3f       	cpi	r27, 0xF9	; 249
 474:	cc f3       	brlt	.-14     	; 0x468 <__fixunssfsi+0x34>
 476:	86 95       	lsr	r24
 478:	77 95       	ror	r23
 47a:	67 95       	ror	r22
 47c:	b3 95       	inc	r27
 47e:	d9 f7       	brne	.-10     	; 0x476 <__fixunssfsi+0x42>
 480:	3e f4       	brtc	.+14     	; 0x490 <__fixunssfsi+0x5c>
 482:	90 95       	com	r25
 484:	80 95       	com	r24
 486:	70 95       	com	r23
 488:	61 95       	neg	r22
 48a:	7f 4f       	sbci	r23, 0xFF	; 255
 48c:	8f 4f       	sbci	r24, 0xFF	; 255
 48e:	9f 4f       	sbci	r25, 0xFF	; 255
 490:	08 95       	ret

00000492 <__floatunsisf>:
 492:	e8 94       	clt
 494:	09 c0       	rjmp	.+18     	; 0x4a8 <__floatsisf+0x12>

00000496 <__floatsisf>:
 496:	97 fb       	bst	r25, 7
 498:	3e f4       	brtc	.+14     	; 0x4a8 <__floatsisf+0x12>
 49a:	90 95       	com	r25
 49c:	80 95       	com	r24
 49e:	70 95       	com	r23
 4a0:	61 95       	neg	r22
 4a2:	7f 4f       	sbci	r23, 0xFF	; 255
 4a4:	8f 4f       	sbci	r24, 0xFF	; 255
 4a6:	9f 4f       	sbci	r25, 0xFF	; 255
 4a8:	99 23       	and	r25, r25
 4aa:	a9 f0       	breq	.+42     	; 0x4d6 <__floatsisf+0x40>
 4ac:	f9 2f       	mov	r31, r25
 4ae:	96 e9       	ldi	r25, 0x96	; 150
 4b0:	bb 27       	eor	r27, r27
 4b2:	93 95       	inc	r25
 4b4:	f6 95       	lsr	r31
 4b6:	87 95       	ror	r24
 4b8:	77 95       	ror	r23
 4ba:	67 95       	ror	r22
 4bc:	b7 95       	ror	r27
 4be:	f1 11       	cpse	r31, r1
 4c0:	f8 cf       	rjmp	.-16     	; 0x4b2 <__floatsisf+0x1c>
 4c2:	fa f4       	brpl	.+62     	; 0x502 <__floatsisf+0x6c>
 4c4:	bb 0f       	add	r27, r27
 4c6:	11 f4       	brne	.+4      	; 0x4cc <__floatsisf+0x36>
 4c8:	60 ff       	sbrs	r22, 0
 4ca:	1b c0       	rjmp	.+54     	; 0x502 <__floatsisf+0x6c>
 4cc:	6f 5f       	subi	r22, 0xFF	; 255
 4ce:	7f 4f       	sbci	r23, 0xFF	; 255
 4d0:	8f 4f       	sbci	r24, 0xFF	; 255
 4d2:	9f 4f       	sbci	r25, 0xFF	; 255
 4d4:	16 c0       	rjmp	.+44     	; 0x502 <__floatsisf+0x6c>
 4d6:	88 23       	and	r24, r24
 4d8:	11 f0       	breq	.+4      	; 0x4de <__floatsisf+0x48>
 4da:	96 e9       	ldi	r25, 0x96	; 150
 4dc:	11 c0       	rjmp	.+34     	; 0x500 <__floatsisf+0x6a>
 4de:	77 23       	and	r23, r23
 4e0:	21 f0       	breq	.+8      	; 0x4ea <__floatsisf+0x54>
 4e2:	9e e8       	ldi	r25, 0x8E	; 142
 4e4:	87 2f       	mov	r24, r23
 4e6:	76 2f       	mov	r23, r22
 4e8:	05 c0       	rjmp	.+10     	; 0x4f4 <__floatsisf+0x5e>
 4ea:	66 23       	and	r22, r22
 4ec:	71 f0       	breq	.+28     	; 0x50a <__floatsisf+0x74>
 4ee:	96 e8       	ldi	r25, 0x86	; 134
 4f0:	86 2f       	mov	r24, r22
 4f2:	70 e0       	ldi	r23, 0x00	; 0
 4f4:	60 e0       	ldi	r22, 0x00	; 0
 4f6:	2a f0       	brmi	.+10     	; 0x502 <__floatsisf+0x6c>
 4f8:	9a 95       	dec	r25
 4fa:	66 0f       	add	r22, r22
 4fc:	77 1f       	adc	r23, r23
 4fe:	88 1f       	adc	r24, r24
 500:	da f7       	brpl	.-10     	; 0x4f8 <__floatsisf+0x62>
 502:	88 0f       	add	r24, r24
 504:	96 95       	lsr	r25
 506:	87 95       	ror	r24
 508:	97 f9       	bld	r25, 7
 50a:	08 95       	ret

0000050c <__fp_inf>:
 50c:	97 f9       	bld	r25, 7
 50e:	9f 67       	ori	r25, 0x7F	; 127
 510:	80 e8       	ldi	r24, 0x80	; 128
 512:	70 e0       	ldi	r23, 0x00	; 0
 514:	60 e0       	ldi	r22, 0x00	; 0
 516:	08 95       	ret

00000518 <__fp_nan>:
 518:	9f ef       	ldi	r25, 0xFF	; 255
 51a:	80 ec       	ldi	r24, 0xC0	; 192
 51c:	08 95       	ret

0000051e <__fp_pscA>:
 51e:	00 24       	eor	r0, r0
 520:	0a 94       	dec	r0
 522:	16 16       	cp	r1, r22
 524:	17 06       	cpc	r1, r23
 526:	18 06       	cpc	r1, r24
 528:	09 06       	cpc	r0, r25
 52a:	08 95       	ret

0000052c <__fp_pscB>:
 52c:	00 24       	eor	r0, r0
 52e:	0a 94       	dec	r0
 530:	12 16       	cp	r1, r18
 532:	13 06       	cpc	r1, r19
 534:	14 06       	cpc	r1, r20
 536:	05 06       	cpc	r0, r21
 538:	08 95       	ret

0000053a <__fp_round>:
 53a:	09 2e       	mov	r0, r25
 53c:	03 94       	inc	r0
 53e:	00 0c       	add	r0, r0
 540:	11 f4       	brne	.+4      	; 0x546 <__fp_round+0xc>
 542:	88 23       	and	r24, r24
 544:	52 f0       	brmi	.+20     	; 0x55a <__fp_round+0x20>
 546:	bb 0f       	add	r27, r27
 548:	40 f4       	brcc	.+16     	; 0x55a <__fp_round+0x20>
 54a:	bf 2b       	or	r27, r31
 54c:	11 f4       	brne	.+4      	; 0x552 <__fp_round+0x18>
 54e:	60 ff       	sbrs	r22, 0
 550:	04 c0       	rjmp	.+8      	; 0x55a <__fp_round+0x20>
 552:	6f 5f       	subi	r22, 0xFF	; 255
 554:	7f 4f       	sbci	r23, 0xFF	; 255
 556:	8f 4f       	sbci	r24, 0xFF	; 255
 558:	9f 4f       	sbci	r25, 0xFF	; 255
 55a:	08 95       	ret

0000055c <__fp_split3>:
 55c:	57 fd       	sbrc	r21, 7
 55e:	90 58       	subi	r25, 0x80	; 128
 560:	44 0f       	add	r20, r20
 562:	55 1f       	adc	r21, r21
 564:	59 f0       	breq	.+22     	; 0x57c <__fp_splitA+0x10>
 566:	5f 3f       	cpi	r21, 0xFF	; 255
 568:	71 f0       	breq	.+28     	; 0x586 <__fp_splitA+0x1a>
 56a:	47 95       	ror	r20

0000056c <__fp_splitA>:
 56c:	88 0f       	add	r24, r24
 56e:	97 fb       	bst	r25, 7
 570:	99 1f       	adc	r25, r25
 572:	61 f0       	breq	.+24     	; 0x58c <__fp_splitA+0x20>
 574:	9f 3f       	cpi	r25, 0xFF	; 255
 576:	79 f0       	breq	.+30     	; 0x596 <__fp_splitA+0x2a>
 578:	87 95       	ror	r24
 57a:	08 95       	ret
 57c:	12 16       	cp	r1, r18
 57e:	13 06       	cpc	r1, r19
 580:	14 06       	cpc	r1, r20
 582:	55 1f       	adc	r21, r21
 584:	f2 cf       	rjmp	.-28     	; 0x56a <__fp_split3+0xe>
 586:	46 95       	lsr	r20
 588:	f1 df       	rcall	.-30     	; 0x56c <__fp_splitA>
 58a:	08 c0       	rjmp	.+16     	; 0x59c <__fp_splitA+0x30>
 58c:	16 16       	cp	r1, r22
 58e:	17 06       	cpc	r1, r23
 590:	18 06       	cpc	r1, r24
 592:	99 1f       	adc	r25, r25
 594:	f1 cf       	rjmp	.-30     	; 0x578 <__fp_splitA+0xc>
 596:	86 95       	lsr	r24
 598:	71 05       	cpc	r23, r1
 59a:	61 05       	cpc	r22, r1
 59c:	08 94       	sec
 59e:	08 95       	ret

000005a0 <__fp_zero>:
 5a0:	e8 94       	clt

000005a2 <__fp_szero>:
 5a2:	bb 27       	eor	r27, r27
 5a4:	66 27       	eor	r22, r22
 5a6:	77 27       	eor	r23, r23
 5a8:	cb 01       	movw	r24, r22
 5aa:	97 f9       	bld	r25, 7
 5ac:	08 95       	ret

000005ae <__mulsf3>:
 5ae:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <__mulsf3x>
 5b2:	0c 94 9d 02 	jmp	0x53a	; 0x53a <__fp_round>
 5b6:	0e 94 8f 02 	call	0x51e	; 0x51e <__fp_pscA>
 5ba:	38 f0       	brcs	.+14     	; 0x5ca <__mulsf3+0x1c>
 5bc:	0e 94 96 02 	call	0x52c	; 0x52c <__fp_pscB>
 5c0:	20 f0       	brcs	.+8      	; 0x5ca <__mulsf3+0x1c>
 5c2:	95 23       	and	r25, r21
 5c4:	11 f0       	breq	.+4      	; 0x5ca <__mulsf3+0x1c>
 5c6:	0c 94 86 02 	jmp	0x50c	; 0x50c <__fp_inf>
 5ca:	0c 94 8c 02 	jmp	0x518	; 0x518 <__fp_nan>
 5ce:	11 24       	eor	r1, r1
 5d0:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__fp_szero>

000005d4 <__mulsf3x>:
 5d4:	0e 94 ae 02 	call	0x55c	; 0x55c <__fp_split3>
 5d8:	70 f3       	brcs	.-36     	; 0x5b6 <__mulsf3+0x8>

000005da <__mulsf3_pse>:
 5da:	95 9f       	mul	r25, r21
 5dc:	c1 f3       	breq	.-16     	; 0x5ce <__mulsf3+0x20>
 5de:	95 0f       	add	r25, r21
 5e0:	50 e0       	ldi	r21, 0x00	; 0
 5e2:	55 1f       	adc	r21, r21
 5e4:	62 9f       	mul	r22, r18
 5e6:	f0 01       	movw	r30, r0
 5e8:	72 9f       	mul	r23, r18
 5ea:	bb 27       	eor	r27, r27
 5ec:	f0 0d       	add	r31, r0
 5ee:	b1 1d       	adc	r27, r1
 5f0:	63 9f       	mul	r22, r19
 5f2:	aa 27       	eor	r26, r26
 5f4:	f0 0d       	add	r31, r0
 5f6:	b1 1d       	adc	r27, r1
 5f8:	aa 1f       	adc	r26, r26
 5fa:	64 9f       	mul	r22, r20
 5fc:	66 27       	eor	r22, r22
 5fe:	b0 0d       	add	r27, r0
 600:	a1 1d       	adc	r26, r1
 602:	66 1f       	adc	r22, r22
 604:	82 9f       	mul	r24, r18
 606:	22 27       	eor	r18, r18
 608:	b0 0d       	add	r27, r0
 60a:	a1 1d       	adc	r26, r1
 60c:	62 1f       	adc	r22, r18
 60e:	73 9f       	mul	r23, r19
 610:	b0 0d       	add	r27, r0
 612:	a1 1d       	adc	r26, r1
 614:	62 1f       	adc	r22, r18
 616:	83 9f       	mul	r24, r19
 618:	a0 0d       	add	r26, r0
 61a:	61 1d       	adc	r22, r1
 61c:	22 1f       	adc	r18, r18
 61e:	74 9f       	mul	r23, r20
 620:	33 27       	eor	r19, r19
 622:	a0 0d       	add	r26, r0
 624:	61 1d       	adc	r22, r1
 626:	23 1f       	adc	r18, r19
 628:	84 9f       	mul	r24, r20
 62a:	60 0d       	add	r22, r0
 62c:	21 1d       	adc	r18, r1
 62e:	82 2f       	mov	r24, r18
 630:	76 2f       	mov	r23, r22
 632:	6a 2f       	mov	r22, r26
 634:	11 24       	eor	r1, r1
 636:	9f 57       	subi	r25, 0x7F	; 127
 638:	50 40       	sbci	r21, 0x00	; 0
 63a:	9a f0       	brmi	.+38     	; 0x662 <__mulsf3_pse+0x88>
 63c:	f1 f0       	breq	.+60     	; 0x67a <__mulsf3_pse+0xa0>
 63e:	88 23       	and	r24, r24
 640:	4a f0       	brmi	.+18     	; 0x654 <__mulsf3_pse+0x7a>
 642:	ee 0f       	add	r30, r30
 644:	ff 1f       	adc	r31, r31
 646:	bb 1f       	adc	r27, r27
 648:	66 1f       	adc	r22, r22
 64a:	77 1f       	adc	r23, r23
 64c:	88 1f       	adc	r24, r24
 64e:	91 50       	subi	r25, 0x01	; 1
 650:	50 40       	sbci	r21, 0x00	; 0
 652:	a9 f7       	brne	.-22     	; 0x63e <__mulsf3_pse+0x64>
 654:	9e 3f       	cpi	r25, 0xFE	; 254
 656:	51 05       	cpc	r21, r1
 658:	80 f0       	brcs	.+32     	; 0x67a <__mulsf3_pse+0xa0>
 65a:	0c 94 86 02 	jmp	0x50c	; 0x50c <__fp_inf>
 65e:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__fp_szero>
 662:	5f 3f       	cpi	r21, 0xFF	; 255
 664:	e4 f3       	brlt	.-8      	; 0x65e <__mulsf3_pse+0x84>
 666:	98 3e       	cpi	r25, 0xE8	; 232
 668:	d4 f3       	brlt	.-12     	; 0x65e <__mulsf3_pse+0x84>
 66a:	86 95       	lsr	r24
 66c:	77 95       	ror	r23
 66e:	67 95       	ror	r22
 670:	b7 95       	ror	r27
 672:	f7 95       	ror	r31
 674:	e7 95       	ror	r30
 676:	9f 5f       	subi	r25, 0xFF	; 255
 678:	c1 f7       	brne	.-16     	; 0x66a <__mulsf3_pse+0x90>
 67a:	fe 2b       	or	r31, r30
 67c:	88 0f       	add	r24, r24
 67e:	91 1d       	adc	r25, r1
 680:	96 95       	lsr	r25
 682:	87 95       	ror	r24
 684:	97 f9       	bld	r25, 7
 686:	08 95       	ret

00000688 <_exit>:
 688:	f8 94       	cli

0000068a <__stop_program>:
 68a:	ff cf       	rjmp	.-2      	; 0x68a <__stop_program>
