
8TH Project UART LCD GPIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004c4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000030  00800060  000004c4  00000538  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000568  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000598  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000220  00000000  00000000  000005d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001b43  00000000  00000000  000007f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000ad2  00000000  00000000  00002337  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000cd8  00000000  00000000  00002e09  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000444  00000000  00000000  00003ae4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000588  00000000  00000000  00003f28  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000bab  00000000  00000000  000044b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001d0  00000000  00000000  0000505b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 8a 01 	jmp	0x314	; 0x314 <__vector_13>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ec       	ldi	r30, 0xC4	; 196
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 39       	cpi	r26, 0x90	; 144
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <main>
  7a:	0c 94 60 02 	jmp	0x4c0	; 0x4c0 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <IsPressed_B>:
			break;
		case out_pin:
			DDRA |= 1<<PinNum;
			break;
		default:
			ReSetPin_A(PinNum);
  82:	26 b3       	in	r18, 0x16	; 22
  84:	30 e0       	ldi	r19, 0x00	; 0
  86:	a9 01       	movw	r20, r18
  88:	02 c0       	rjmp	.+4      	; 0x8e <IsPressed_B+0xc>
  8a:	55 95       	asr	r21
  8c:	47 95       	ror	r20
  8e:	8a 95       	dec	r24
  90:	e2 f7       	brpl	.-8      	; 0x8a <IsPressed_B+0x8>
  92:	ca 01       	movw	r24, r20
  94:	81 70       	andi	r24, 0x01	; 1
  96:	08 95       	ret

00000098 <IsPressed_D>:
  98:	20 b3       	in	r18, 0x10	; 16
  9a:	30 e0       	ldi	r19, 0x00	; 0
  9c:	a9 01       	movw	r20, r18
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <IsPressed_D+0xc>
  a0:	55 95       	asr	r21
  a2:	47 95       	ror	r20
  a4:	8a 95       	dec	r24
  a6:	e2 f7       	brpl	.-8      	; 0xa0 <IsPressed_D+0x8>
  a8:	ca 01       	movw	r24, r20
  aa:	81 70       	andi	r24, 0x01	; 1
  ac:	08 95       	ret

000000ae <SetPin_B>:
  ae:	98 b3       	in	r25, 0x18	; 24
  b0:	21 e0       	ldi	r18, 0x01	; 1
  b2:	30 e0       	ldi	r19, 0x00	; 0
  b4:	02 c0       	rjmp	.+4      	; 0xba <SetPin_B+0xc>
  b6:	22 0f       	add	r18, r18
  b8:	33 1f       	adc	r19, r19
  ba:	8a 95       	dec	r24
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <SetPin_B+0x8>
  be:	29 2b       	or	r18, r25
  c0:	28 bb       	out	0x18, r18	; 24
  c2:	08 95       	ret

000000c4 <ReSetPin_B>:
  c4:	98 b3       	in	r25, 0x18	; 24
  c6:	21 e0       	ldi	r18, 0x01	; 1
  c8:	30 e0       	ldi	r19, 0x00	; 0
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <ReSetPin_B+0xc>
  cc:	22 0f       	add	r18, r18
  ce:	33 1f       	adc	r19, r19
  d0:	8a 95       	dec	r24
  d2:	e2 f7       	brpl	.-8      	; 0xcc <ReSetPin_B+0x8>
  d4:	20 95       	com	r18
  d6:	29 23       	and	r18, r25
  d8:	28 bb       	out	0x18, r18	; 24
  da:	08 95       	ret

000000dc <Toggle_C>:
  dc:	95 b3       	in	r25, 0x15	; 21
  de:	21 e0       	ldi	r18, 0x01	; 1
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <Toggle_C+0xc>
  e4:	22 0f       	add	r18, r18
  e6:	33 1f       	adc	r19, r19
  e8:	8a 95       	dec	r24
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <Toggle_C+0x8>
  ec:	29 27       	eor	r18, r25
  ee:	25 bb       	out	0x15, r18	; 21
  f0:	08 95       	ret

000000f2 <Toggle_D>:
  f2:	92 b3       	in	r25, 0x12	; 18
  f4:	21 e0       	ldi	r18, 0x01	; 1
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	02 c0       	rjmp	.+4      	; 0xfe <Toggle_D+0xc>
  fa:	22 0f       	add	r18, r18
  fc:	33 1f       	adc	r19, r19
  fe:	8a 95       	dec	r24
 100:	e2 f7       	brpl	.-8      	; 0xfa <Toggle_D+0x8>
 102:	29 27       	eor	r18, r25
 104:	22 bb       	out	0x12, r18	; 18
 106:	08 95       	ret

00000108 <Dir_B>:
	}
}
void Dir_B(char state,int PinNum)
{
	switch(state)
 108:	88 23       	and	r24, r24
 10a:	19 f0       	breq	.+6      	; 0x112 <Dir_B+0xa>
 10c:	81 30       	cpi	r24, 0x01	; 1
 10e:	69 f0       	breq	.+26     	; 0x12a <Dir_B+0x22>
 110:	17 c0       	rjmp	.+46     	; 0x140 <Dir_B+0x38>
	{
		case in_pin:
		DDRB &= ~(1<<PinNum);
 112:	27 b3       	in	r18, 0x17	; 23
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	02 c0       	rjmp	.+4      	; 0x11e <Dir_B+0x16>
 11a:	88 0f       	add	r24, r24
 11c:	99 1f       	adc	r25, r25
 11e:	6a 95       	dec	r22
 120:	e2 f7       	brpl	.-8      	; 0x11a <Dir_B+0x12>
 122:	80 95       	com	r24
 124:	82 23       	and	r24, r18
 126:	87 bb       	out	0x17, r24	; 23
		break;
 128:	08 95       	ret
		case out_pin:
		DDRB |= 1<<PinNum;
 12a:	27 b3       	in	r18, 0x17	; 23
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	02 c0       	rjmp	.+4      	; 0x136 <Dir_B+0x2e>
 132:	88 0f       	add	r24, r24
 134:	99 1f       	adc	r25, r25
 136:	6a 95       	dec	r22
 138:	e2 f7       	brpl	.-8      	; 0x132 <Dir_B+0x2a>
 13a:	82 2b       	or	r24, r18
 13c:	87 bb       	out	0x17, r24	; 23
		break;
 13e:	08 95       	ret
		default:
		DDRB &= ~(1<<PinNum);
 140:	27 b3       	in	r18, 0x17	; 23
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	02 c0       	rjmp	.+4      	; 0x14c <Dir_B+0x44>
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	6a 95       	dec	r22
 14e:	e2 f7       	brpl	.-8      	; 0x148 <Dir_B+0x40>
 150:	80 95       	com	r24
 152:	82 23       	and	r24, r18
 154:	87 bb       	out	0x17, r24	; 23
 156:	08 95       	ret

00000158 <Dir_C>:
	}
}
void Dir_C(char state,int PinNum)
{
	switch(state)
 158:	88 23       	and	r24, r24
 15a:	19 f0       	breq	.+6      	; 0x162 <Dir_C+0xa>
 15c:	81 30       	cpi	r24, 0x01	; 1
 15e:	69 f0       	breq	.+26     	; 0x17a <Dir_C+0x22>
 160:	17 c0       	rjmp	.+46     	; 0x190 <Dir_C+0x38>
	{
		case in_pin:
		DDRC &= ~(1<<PinNum);
 162:	24 b3       	in	r18, 0x14	; 20
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	02 c0       	rjmp	.+4      	; 0x16e <Dir_C+0x16>
 16a:	88 0f       	add	r24, r24
 16c:	99 1f       	adc	r25, r25
 16e:	6a 95       	dec	r22
 170:	e2 f7       	brpl	.-8      	; 0x16a <Dir_C+0x12>
 172:	80 95       	com	r24
 174:	82 23       	and	r24, r18
 176:	84 bb       	out	0x14, r24	; 20
		break;
 178:	08 95       	ret
		case out_pin:
		DDRC |= 1<<PinNum;
 17a:	24 b3       	in	r18, 0x14	; 20
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	02 c0       	rjmp	.+4      	; 0x186 <Dir_C+0x2e>
 182:	88 0f       	add	r24, r24
 184:	99 1f       	adc	r25, r25
 186:	6a 95       	dec	r22
 188:	e2 f7       	brpl	.-8      	; 0x182 <Dir_C+0x2a>
 18a:	82 2b       	or	r24, r18
 18c:	84 bb       	out	0x14, r24	; 20
		break;
 18e:	08 95       	ret
		default:
		DDRC &= ~(1<<PinNum);
 190:	24 b3       	in	r18, 0x14	; 20
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	02 c0       	rjmp	.+4      	; 0x19c <Dir_C+0x44>
 198:	88 0f       	add	r24, r24
 19a:	99 1f       	adc	r25, r25
 19c:	6a 95       	dec	r22
 19e:	e2 f7       	brpl	.-8      	; 0x198 <Dir_C+0x40>
 1a0:	80 95       	com	r24
 1a2:	82 23       	and	r24, r18
 1a4:	84 bb       	out	0x14, r24	; 20
 1a6:	08 95       	ret

000001a8 <Dir_D>:
	}
}
void Dir_D(char state,int PinNum)
{
	switch(state)
 1a8:	88 23       	and	r24, r24
 1aa:	19 f0       	breq	.+6      	; 0x1b2 <Dir_D+0xa>
 1ac:	81 30       	cpi	r24, 0x01	; 1
 1ae:	69 f0       	breq	.+26     	; 0x1ca <Dir_D+0x22>
 1b0:	17 c0       	rjmp	.+46     	; 0x1e0 <Dir_D+0x38>
	{
		case in_pin:
		DDRD &= ~(1<<PinNum);
 1b2:	21 b3       	in	r18, 0x11	; 17
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <Dir_D+0x16>
 1ba:	88 0f       	add	r24, r24
 1bc:	99 1f       	adc	r25, r25
 1be:	6a 95       	dec	r22
 1c0:	e2 f7       	brpl	.-8      	; 0x1ba <Dir_D+0x12>
 1c2:	80 95       	com	r24
 1c4:	82 23       	and	r24, r18
 1c6:	81 bb       	out	0x11, r24	; 17
		break;
 1c8:	08 95       	ret
		case out_pin:
		DDRD |= 1<<PinNum;
 1ca:	21 b3       	in	r18, 0x11	; 17
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <Dir_D+0x2e>
 1d2:	88 0f       	add	r24, r24
 1d4:	99 1f       	adc	r25, r25
 1d6:	6a 95       	dec	r22
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <Dir_D+0x2a>
 1da:	82 2b       	or	r24, r18
 1dc:	81 bb       	out	0x11, r24	; 17
		break;
 1de:	08 95       	ret
		default:
		DDRD &= ~(1<<PinNum);
 1e0:	21 b3       	in	r18, 0x11	; 17
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <Dir_D+0x44>
 1e8:	88 0f       	add	r24, r24
 1ea:	99 1f       	adc	r25, r25
 1ec:	6a 95       	dec	r22
 1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <Dir_D+0x40>
 1f0:	80 95       	com	r24
 1f2:	82 23       	and	r24, r18
 1f4:	81 bb       	out	0x11, r24	; 17
 1f6:	08 95       	ret

000001f8 <LCD4_Enable>:
	_delay_ms(1);
	//LCD4_Command(LCD4home);
}
void LCD4_Enable(void)
{
	SetPin_B(EnLCD4);
 1f8:	83 e0       	ldi	r24, 0x03	; 3
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	0e 94 57 00 	call	0xae	; 0xae <SetPin_B>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 200:	8f e3       	ldi	r24, 0x3F	; 63
 202:	9c e9       	ldi	r25, 0x9C	; 156
 204:	01 97       	sbiw	r24, 0x01	; 1
 206:	f1 f7       	brne	.-4      	; 0x204 <LCD4_Enable+0xc>
 208:	00 c0       	rjmp	.+0      	; 0x20a <LCD4_Enable+0x12>
 20a:	00 00       	nop
	_delay_ms(10);
	ReSetPin_B(EnLCD4);
 20c:	83 e0       	ldi	r24, 0x03	; 3
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	0e 94 62 00 	call	0xc4	; 0xc4 <ReSetPin_B>
 214:	8f e1       	ldi	r24, 0x1F	; 31
 216:	9e e4       	ldi	r25, 0x4E	; 78
 218:	01 97       	sbiw	r24, 0x01	; 1
 21a:	f1 f7       	brne	.-4      	; 0x218 <LCD4_Enable+0x20>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <LCD4_Enable+0x26>
 21e:	00 00       	nop
 220:	08 95       	ret

00000222 <LCD4_Command>:
	LCD4_Clear();
	
	
}
void LCD4_Command(char cmd)
{
 222:	cf 93       	push	r28
 224:	c8 2f       	mov	r28, r24
		Data4 = (Data4 & 0x0F)|((cmd & 0xF0));
 226:	8b b3       	in	r24, 0x1b	; 27
 228:	8f 70       	andi	r24, 0x0F	; 15
 22a:	9c 2f       	mov	r25, r28
 22c:	90 7f       	andi	r25, 0xF0	; 240
 22e:	89 2b       	or	r24, r25
 230:	8b bb       	out	0x1b, r24	; 27
		ReSetPin_B(RsLCD4);
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	0e 94 62 00 	call	0xc4	; 0xc4 <ReSetPin_B>
		LCD4_Enable();
 23a:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <LCD4_Enable>
 23e:	8f e9       	ldi	r24, 0x9F	; 159
 240:	9f e0       	ldi	r25, 0x0F	; 15
 242:	01 97       	sbiw	r24, 0x01	; 1
 244:	f1 f7       	brne	.-4      	; 0x242 <LCD4_Command+0x20>
 246:	00 c0       	rjmp	.+0      	; 0x248 <LCD4_Command+0x26>
 248:	00 00       	nop
		_delay_ms(1);
	Data4 = (Data4 & 0x0F)| ((cmd & 0x0F)<<4);
 24a:	8b b3       	in	r24, 0x1b	; 27
 24c:	28 2f       	mov	r18, r24
 24e:	2f 70       	andi	r18, 0x0F	; 15
 250:	30 e1       	ldi	r19, 0x10	; 16
 252:	c3 9f       	mul	r28, r19
 254:	c0 01       	movw	r24, r0
 256:	11 24       	eor	r1, r1
 258:	82 2b       	or	r24, r18
 25a:	8b bb       	out	0x1b, r24	; 27
	ReSetPin_B(RsLCD4);
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	0e 94 62 00 	call	0xc4	; 0xc4 <ReSetPin_B>
	LCD4_Enable();
 264:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <LCD4_Enable>

	
}
 268:	cf 91       	pop	r28
 26a:	08 95       	ret

0000026c <LCD4_Clear>:

	
}
void LCD4_Clear(void)
{
	LCD4_Command(LCDclear);
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	0e 94 11 01 	call	0x222	; 0x222 <LCD4_Command>
 272:	8f e9       	ldi	r24, 0x9F	; 159
 274:	9f e0       	ldi	r25, 0x0F	; 15
 276:	01 97       	sbiw	r24, 0x01	; 1
 278:	f1 f7       	brne	.-4      	; 0x276 <LCD4_Clear+0xa>
 27a:	00 c0       	rjmp	.+0      	; 0x27c <LCD4_Clear+0x10>
 27c:	00 00       	nop
 27e:	08 95       	ret

00000280 <LCD4_Init>:
#include "LCD4.h"


void LCD4_Init(void)
{
	DataDir4 |= 0xF0;
 280:	8a b3       	in	r24, 0x1a	; 26
 282:	80 6f       	ori	r24, 0xF0	; 240
 284:	8a bb       	out	0x1a, r24	; 26
	CmdDir4 |= (1<<RsLCD4) | (1 << EnLCD4)| (1<<RWLCD4);
 286:	87 b3       	in	r24, 0x17	; 23
 288:	8e 60       	ori	r24, 0x0E	; 14
 28a:	87 bb       	out	0x17, r24	; 23
	RW &= ~(1<<RWLCD4);
 28c:	c2 98       	cbi	0x18, 2	; 24
	
	LCD4_Command(0x02);  // 8_bit Mode
 28e:	82 e0       	ldi	r24, 0x02	; 2
 290:	0e 94 11 01 	call	0x222	; 0x222 <LCD4_Command>
	LCD4_Command(0x0c); // Cursor off,display on
 294:	8c e0       	ldi	r24, 0x0C	; 12
 296:	0e 94 11 01 	call	0x222	; 0x222 <LCD4_Command>
 29a:	8f e3       	ldi	r24, 0x3F	; 63
 29c:	9c e9       	ldi	r25, 0x9C	; 156
 29e:	01 97       	sbiw	r24, 0x01	; 1
 2a0:	f1 f7       	brne	.-4      	; 0x29e <LCD4_Init+0x1e>
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <LCD4_Init+0x24>
 2a4:	00 00       	nop
	_delay_ms(10);
	LCD4_Clear();
 2a6:	0e 94 36 01 	call	0x26c	; 0x26c <LCD4_Clear>
 2aa:	08 95       	ret

000002ac <LCD4_Data>:
	LCD4_Enable();

	
}
void LCD4_Data(char data)
{
 2ac:	cf 93       	push	r28
 2ae:	c8 2f       	mov	r28, r24
		Data4 = (Data4 & 0x0F)|((data & 0xF0));
 2b0:	8b b3       	in	r24, 0x1b	; 27
 2b2:	8f 70       	andi	r24, 0x0F	; 15
 2b4:	9c 2f       	mov	r25, r28
 2b6:	90 7f       	andi	r25, 0xF0	; 240
 2b8:	89 2b       	or	r24, r25
 2ba:	8b bb       	out	0x1b, r24	; 27
		SetPin_B(RsLCD4);
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	0e 94 57 00 	call	0xae	; 0xae <SetPin_B>
		LCD4_Enable();
 2c4:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <LCD4_Enable>
 2c8:	8f e9       	ldi	r24, 0x9F	; 159
 2ca:	9f e0       	ldi	r25, 0x0F	; 15
 2cc:	01 97       	sbiw	r24, 0x01	; 1
 2ce:	f1 f7       	brne	.-4      	; 0x2cc <LCD4_Data+0x20>
 2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <LCD4_Data+0x26>
 2d2:	00 00       	nop
		_delay_ms(1);
	Data4 = (Data4 & 0x0F)|((data & 0x0F)<<4);
 2d4:	8b b3       	in	r24, 0x1b	; 27
 2d6:	28 2f       	mov	r18, r24
 2d8:	2f 70       	andi	r18, 0x0F	; 15
 2da:	30 e1       	ldi	r19, 0x10	; 16
 2dc:	c3 9f       	mul	r28, r19
 2de:	c0 01       	movw	r24, r0
 2e0:	11 24       	eor	r1, r1
 2e2:	82 2b       	or	r24, r18
 2e4:	8b bb       	out	0x1b, r24	; 27
	SetPin_B(RsLCD4);
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	0e 94 57 00 	call	0xae	; 0xae <SetPin_B>
	LCD4_Enable();
 2ee:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <LCD4_Enable>
	

	
}
 2f2:	cf 91       	pop	r28
 2f4:	08 95       	ret

000002f6 <LCD4_StrData>:
	_delay_ms(10);
	ReSetPin_B(EnLCD4);
	_delay_ms(5);
}
void LCD4_StrData(char* s)
{
 2f6:	cf 93       	push	r28
 2f8:	df 93       	push	r29
 2fa:	ec 01       	movw	r28, r24
	for (int i = 0; s[i] !='\0';i++)
 2fc:	88 81       	ld	r24, Y
 2fe:	88 23       	and	r24, r24
 300:	31 f0       	breq	.+12     	; 0x30e <LCD4_StrData+0x18>
 302:	21 96       	adiw	r28, 0x01	; 1
	{
		LCD4_Data(s[i]);
 304:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCD4_Data>
	ReSetPin_B(EnLCD4);
	_delay_ms(5);
}
void LCD4_StrData(char* s)
{
	for (int i = 0; s[i] !='\0';i++)
 308:	89 91       	ld	r24, Y+
 30a:	81 11       	cpse	r24, r1
 30c:	fb cf       	rjmp	.-10     	; 0x304 <LCD4_StrData+0xe>
	{
		LCD4_Data(s[i]);
	}
}
 30e:	df 91       	pop	r29
 310:	cf 91       	pop	r28
 312:	08 95       	ret

00000314 <__vector_13>:
#include "ExtInterrupt.h"
#include "UART.h"
#include <avr/interrupt.h>

ISR(USART_RXC_vect)
{
 314:	1f 92       	push	r1
 316:	0f 92       	push	r0
 318:	0f b6       	in	r0, 0x3f	; 63
 31a:	0f 92       	push	r0
 31c:	11 24       	eor	r1, r1
 31e:	2f 93       	push	r18
 320:	3f 93       	push	r19
 322:	4f 93       	push	r20
 324:	5f 93       	push	r21
 326:	6f 93       	push	r22
 328:	7f 93       	push	r23
 32a:	8f 93       	push	r24
 32c:	9f 93       	push	r25
 32e:	af 93       	push	r26
 330:	bf 93       	push	r27
 332:	ef 93       	push	r30
 334:	ff 93       	push	r31
	char Rx = UDR;
 336:	8c b1       	in	r24, 0x0c	; 12
	switch (Rx)
 338:	82 34       	cpi	r24, 0x42	; 66
 33a:	79 f0       	breq	.+30     	; 0x35a <__vector_13+0x46>
 33c:	83 34       	cpi	r24, 0x43	; 67
 33e:	c1 f0       	breq	.+48     	; 0x370 <__vector_13+0x5c>
 340:	81 34       	cpi	r24, 0x41	; 65
 342:	01 f5       	brne	.+64     	; 0x384 <__vector_13+0x70>
	{
		case 'A':
			Toggle_C(LEDC0);
 344:	82 e0       	ldi	r24, 0x02	; 2
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	0e 94 6e 00 	call	0xdc	; 0xdc <Toggle_C>
			LCD4_Clear();
 34c:	0e 94 36 01 	call	0x26c	; 0x26c <LCD4_Clear>
			LCD4_StrData("Sw 0 is pressed");
 350:	80 e6       	ldi	r24, 0x60	; 96
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LCD4_StrData>
			break;
 358:	15 c0       	rjmp	.+42     	; 0x384 <__vector_13+0x70>
		case 'B':
			Toggle_C(LEDC1);
 35a:	87 e0       	ldi	r24, 0x07	; 7
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	0e 94 6e 00 	call	0xdc	; 0xdc <Toggle_C>
			LCD4_Clear();
 362:	0e 94 36 01 	call	0x26c	; 0x26c <LCD4_Clear>
			LCD4_StrData("Sw 1 is pressed");
 366:	80 e7       	ldi	r24, 0x70	; 112
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LCD4_StrData>
			break;
 36e:	0a c0       	rjmp	.+20     	; 0x384 <__vector_13+0x70>
		case 'C':
			Toggle_D(LEDD2);
 370:	83 e0       	ldi	r24, 0x03	; 3
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	0e 94 79 00 	call	0xf2	; 0xf2 <Toggle_D>
			LCD4_Clear();
 378:	0e 94 36 01 	call	0x26c	; 0x26c <LCD4_Clear>
			LCD4_StrData("Sw 2 is pressed");
 37c:	80 e8       	ldi	r24, 0x80	; 128
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LCD4_StrData>
			break;
		default:
			break;
	}
	
}
 384:	ff 91       	pop	r31
 386:	ef 91       	pop	r30
 388:	bf 91       	pop	r27
 38a:	af 91       	pop	r26
 38c:	9f 91       	pop	r25
 38e:	8f 91       	pop	r24
 390:	7f 91       	pop	r23
 392:	6f 91       	pop	r22
 394:	5f 91       	pop	r21
 396:	4f 91       	pop	r20
 398:	3f 91       	pop	r19
 39a:	2f 91       	pop	r18
 39c:	0f 90       	pop	r0
 39e:	0f be       	out	0x3f, r0	; 63
 3a0:	0f 90       	pop	r0
 3a2:	1f 90       	pop	r1
 3a4:	18 95       	reti

000003a6 <main>:
int main(void)
{
    /* Replace with your application code */
	//Btn0_Init();
	//Dir_B(out_pin,0);
	Dir_B(in_pin,0); //Slave
 3a6:	60 e0       	ldi	r22, 0x00	; 0
 3a8:	70 e0       	ldi	r23, 0x00	; 0
 3aa:	80 e0       	ldi	r24, 0x00	; 0
 3ac:	0e 94 84 00 	call	0x108	; 0x108 <Dir_B>
	Btn1_Init();
 3b0:	0e 94 25 02 	call	0x44a	; 0x44a <Btn1_Init>
	Btn2_Init();
 3b4:	0e 94 2b 02 	call	0x456	; 0x456 <Btn2_Init>
	Dir_C(out_pin,LEDC0);
 3b8:	62 e0       	ldi	r22, 0x02	; 2
 3ba:	70 e0       	ldi	r23, 0x00	; 0
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	0e 94 ac 00 	call	0x158	; 0x158 <Dir_C>
	Dir_C(out_pin,LEDC1);
 3c2:	67 e0       	ldi	r22, 0x07	; 7
 3c4:	70 e0       	ldi	r23, 0x00	; 0
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	0e 94 ac 00 	call	0x158	; 0x158 <Dir_C>
	Dir_D(out_pin,LEDD2);
 3cc:	63 e0       	ldi	r22, 0x03	; 3
 3ce:	70 e0       	ldi	r23, 0x00	; 0
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <Dir_D>
	LCD4_Init();
 3d6:	0e 94 40 01 	call	0x280	; 0x280 <LCD4_Init>
	UART_Init(9600);
 3da:	80 e8       	ldi	r24, 0x80	; 128
 3dc:	95 e2       	ldi	r25, 0x25	; 37
 3de:	0e 94 55 02 	call	0x4aa	; 0x4aa <UART_Init>
	sei();
 3e2:	78 94       	sei
    while (1) 
    {
		if(IsPressed_Btn0())
 3e4:	0e 94 31 02 	call	0x462	; 0x462 <IsPressed_Btn0>
 3e8:	89 2b       	or	r24, r25
 3ea:	69 f0       	breq	.+26     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
		{
			UART_Data('A');
 3ec:	81 e4       	ldi	r24, 0x41	; 65
 3ee:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <UART_Data>
 3f2:	2f ef       	ldi	r18, 0xFF	; 255
 3f4:	89 e6       	ldi	r24, 0x69	; 105
 3f6:	98 e1       	ldi	r25, 0x18	; 24
 3f8:	21 50       	subi	r18, 0x01	; 1
 3fa:	80 40       	sbci	r24, 0x00	; 0
 3fc:	90 40       	sbci	r25, 0x00	; 0
 3fe:	e1 f7       	brne	.-8      	; 0x3f8 <main+0x52>
 400:	00 c0       	rjmp	.+0      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 402:	00 00       	nop
 404:	ef cf       	rjmp	.-34     	; 0x3e4 <main+0x3e>
			_delay_ms(500);
		}
		else if(IsPressed_Btn1())
 406:	0e 94 3d 02 	call	0x47a	; 0x47a <IsPressed_Btn1>
 40a:	89 2b       	or	r24, r25
 40c:	69 f0       	breq	.+26     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
		{
			UART_Data('B');
 40e:	82 e4       	ldi	r24, 0x42	; 66
 410:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <UART_Data>
 414:	2f ef       	ldi	r18, 0xFF	; 255
 416:	89 e6       	ldi	r24, 0x69	; 105
 418:	98 e1       	ldi	r25, 0x18	; 24
 41a:	21 50       	subi	r18, 0x01	; 1
 41c:	80 40       	sbci	r24, 0x00	; 0
 41e:	90 40       	sbci	r25, 0x00	; 0
 420:	e1 f7       	brne	.-8      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 422:	00 c0       	rjmp	.+0      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 424:	00 00       	nop
 426:	de cf       	rjmp	.-68     	; 0x3e4 <main+0x3e>
			_delay_ms(500);
		}
		else if (IsPressed_Btn2())
 428:	0e 94 49 02 	call	0x492	; 0x492 <IsPressed_Btn2>
 42c:	89 2b       	or	r24, r25
 42e:	d1 f2       	breq	.-76     	; 0x3e4 <main+0x3e>
		{
			UART_Data('C');
 430:	83 e4       	ldi	r24, 0x43	; 67
 432:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <UART_Data>
 436:	2f ef       	ldi	r18, 0xFF	; 255
 438:	89 e6       	ldi	r24, 0x69	; 105
 43a:	98 e1       	ldi	r25, 0x18	; 24
 43c:	21 50       	subi	r18, 0x01	; 1
 43e:	80 40       	sbci	r24, 0x00	; 0
 440:	90 40       	sbci	r25, 0x00	; 0
 442:	e1 f7       	brne	.-8      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 444:	00 c0       	rjmp	.+0      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 446:	00 00       	nop
 448:	cd cf       	rjmp	.-102    	; 0x3e4 <main+0x3e>

0000044a <Btn1_Init>:
{
	Dir_B(in_pin , 0);
}
void Btn1_Init(void)
{
	Dir_D(in_pin, 6);
 44a:	66 e0       	ldi	r22, 0x06	; 6
 44c:	70 e0       	ldi	r23, 0x00	; 0
 44e:	80 e0       	ldi	r24, 0x00	; 0
 450:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <Dir_D>
 454:	08 95       	ret

00000456 <Btn2_Init>:
}
void Btn2_Init(void)
{
	Dir_D(in_pin ,2);
 456:	62 e0       	ldi	r22, 0x02	; 2
 458:	70 e0       	ldi	r23, 0x00	; 0
 45a:	80 e0       	ldi	r24, 0x00	; 0
 45c:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <Dir_D>
 460:	08 95       	ret

00000462 <IsPressed_Btn0>:
}
int IsPressed_Btn0(void)
{
	if (IsPressed_B(BtnB0))
 462:	80 e0       	ldi	r24, 0x00	; 0
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	0e 94 41 00 	call	0x82	; 0x82 <IsPressed_B>
 46a:	21 e0       	ldi	r18, 0x01	; 1
 46c:	30 e0       	ldi	r19, 0x00	; 0
 46e:	81 11       	cpse	r24, r1
 470:	02 c0       	rjmp	.+4      	; 0x476 <IsPressed_Btn0+0x14>
 472:	20 e0       	ldi	r18, 0x00	; 0
 474:	30 e0       	ldi	r19, 0x00	; 0
	return 1;
	else
	return 0;
}
 476:	c9 01       	movw	r24, r18
 478:	08 95       	ret

0000047a <IsPressed_Btn1>:
int IsPressed_Btn1(void)
{
	if (IsPressed_D(BtnD1))
 47a:	86 e0       	ldi	r24, 0x06	; 6
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	0e 94 4c 00 	call	0x98	; 0x98 <IsPressed_D>
 482:	21 e0       	ldi	r18, 0x01	; 1
 484:	30 e0       	ldi	r19, 0x00	; 0
 486:	81 11       	cpse	r24, r1
 488:	02 c0       	rjmp	.+4      	; 0x48e <IsPressed_Btn1+0x14>
 48a:	20 e0       	ldi	r18, 0x00	; 0
 48c:	30 e0       	ldi	r19, 0x00	; 0
	return 1;
	else
	return 0;
}
 48e:	c9 01       	movw	r24, r18
 490:	08 95       	ret

00000492 <IsPressed_Btn2>:
int IsPressed_Btn2(void)
{
	if (IsPressed_D(BtnD2))
 492:	82 e0       	ldi	r24, 0x02	; 2
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	0e 94 4c 00 	call	0x98	; 0x98 <IsPressed_D>
 49a:	21 e0       	ldi	r18, 0x01	; 1
 49c:	30 e0       	ldi	r19, 0x00	; 0
 49e:	81 11       	cpse	r24, r1
 4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <IsPressed_Btn2+0x14>
 4a2:	20 e0       	ldi	r18, 0x00	; 0
 4a4:	30 e0       	ldi	r19, 0x00	; 0
	return 1;
	else
	return 0;
}
 4a6:	c9 01       	movw	r24, r18
 4a8:	08 95       	ret

000004aa <UART_Init>:
}
void UART_BaudRate(unsigned int rate)
{
	unsigned int BR = (F_CPU/(16.0 * rate))-1;
	UBRRL = (char)BR;
	UBRRH = (BR >> 8);
 4aa:	86 ec       	ldi	r24, 0xC6	; 198
 4ac:	80 bd       	out	0x20, r24	; 32
 4ae:	8a b1       	in	r24, 0x0a	; 10
 4b0:	88 61       	ori	r24, 0x18	; 24
 4b2:	8a b9       	out	0x0a, r24	; 10
 4b4:	57 9a       	sbi	0x0a, 7	; 10
 4b6:	08 95       	ret

000004b8 <UART_Data>:
}
void UART_Data(char data)
{
	while (!(UCSRA & (1 << UDRE) ) );
 4b8:	5d 9b       	sbis	0x0b, 5	; 11
 4ba:	fe cf       	rjmp	.-4      	; 0x4b8 <UART_Data>
	UDR = data;
 4bc:	8c b9       	out	0x0c, r24	; 12
 4be:	08 95       	ret

000004c0 <_exit>:
 4c0:	f8 94       	cli

000004c2 <__stop_program>:
 4c2:	ff cf       	rjmp	.-2      	; 0x4c2 <__stop_program>
