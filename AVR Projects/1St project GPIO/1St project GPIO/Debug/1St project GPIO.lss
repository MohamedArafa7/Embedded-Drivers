
1St project GPIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000128  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000158  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000659  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000588  00000000  00000000  0000080d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000025e  00000000  00000000  00000d95  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000ff4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000320  00000000  00000000  00001018  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b4  00000000  00000000  00001338  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000013ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 68 00 	jmp	0xd0	; 0xd0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
{
    /* Replace with your application code */
	
	
	
	DDRA = 0XFF;     /// PortA as output
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	8a bb       	out	0x1a, r24	; 26
	
	PORTA = 0x00;   ///PortA all pins are high
  70:	1b ba       	out	0x1b, r1	; 27
    while (1) 
    {
			for (int i = 7; i >= 1;i--)
			{
				_delay_ms(500);
				PORTA = (1<<i);
  72:	21 e0       	ldi	r18, 0x01	; 1
  74:	30 e0       	ldi	r19, 0x00	; 0
	
	PORTA = 0x00;   ///PortA all pins are high
	
    while (1) 
    {
			for (int i = 7; i >= 1;i--)
  76:	87 e0       	ldi	r24, 0x07	; 7
  78:	90 e0       	ldi	r25, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  7a:	4f e9       	ldi	r20, 0x9F	; 159
  7c:	56 e8       	ldi	r21, 0x86	; 134
  7e:	61 e0       	ldi	r22, 0x01	; 1
  80:	41 50       	subi	r20, 0x01	; 1
  82:	50 40       	sbci	r21, 0x00	; 0
  84:	60 40       	sbci	r22, 0x00	; 0
  86:	e1 f7       	brne	.-8      	; 0x80 <main+0x14>
  88:	00 c0       	rjmp	.+0      	; 0x8a <main+0x1e>
  8a:	00 00       	nop
			{
				_delay_ms(500);
				PORTA = (1<<i);
  8c:	a9 01       	movw	r20, r18
  8e:	08 2e       	mov	r0, r24
  90:	02 c0       	rjmp	.+4      	; 0x96 <main+0x2a>
  92:	44 0f       	add	r20, r20
  94:	55 1f       	adc	r21, r21
  96:	0a 94       	dec	r0
  98:	e2 f7       	brpl	.-8      	; 0x92 <main+0x26>
  9a:	4b bb       	out	0x1b, r20	; 27
	
	PORTA = 0x00;   ///PortA all pins are high
	
    while (1) 
    {
			for (int i = 7; i >= 1;i--)
  9c:	01 97       	sbiw	r24, 0x01	; 1
  9e:	69 f7       	brne	.-38     	; 0x7a <main+0xe>
  a0:	80 e0       	ldi	r24, 0x00	; 0
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	4f e9       	ldi	r20, 0x9F	; 159
  a6:	56 e8       	ldi	r21, 0x86	; 134
  a8:	61 e0       	ldi	r22, 0x01	; 1
  aa:	41 50       	subi	r20, 0x01	; 1
  ac:	50 40       	sbci	r21, 0x00	; 0
  ae:	60 40       	sbci	r22, 0x00	; 0
  b0:	e1 f7       	brne	.-8      	; 0xaa <main+0x3e>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <main+0x48>
  b4:	00 00       	nop
				PORTA = (1<<i);
			}
		for (int i = 0; i < 7;i++)
		{
			_delay_ms(500);
			PORTA = (1<<i);
  b6:	a9 01       	movw	r20, r18
  b8:	08 2e       	mov	r0, r24
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <main+0x54>
  bc:	44 0f       	add	r20, r20
  be:	55 1f       	adc	r21, r21
  c0:	0a 94       	dec	r0
  c2:	e2 f7       	brpl	.-8      	; 0xbc <main+0x50>
  c4:	4b bb       	out	0x1b, r20	; 27
			for (int i = 7; i >= 1;i--)
			{
				_delay_ms(500);
				PORTA = (1<<i);
			}
		for (int i = 0; i < 7;i++)
  c6:	01 96       	adiw	r24, 0x01	; 1
  c8:	87 30       	cpi	r24, 0x07	; 7
  ca:	91 05       	cpc	r25, r1
  cc:	59 f7       	brne	.-42     	; 0xa4 <main+0x38>
  ce:	d3 cf       	rjmp	.-90     	; 0x76 <main+0xa>

000000d0 <_exit>:
  d0:	f8 94       	cli

000000d2 <__stop_program>:
  d2:	ff cf       	rjmp	.-2      	; 0xd2 <__stop_program>
