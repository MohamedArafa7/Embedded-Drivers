
2nd project GPIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000043a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000048e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000048e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004c0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000001a8  00000000  00000000  000004fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000114e  00000000  00000000  000006a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007df  00000000  00000000  000017f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000788  00000000  00000000  00001fd1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002a8  00000000  00000000  0000275c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000441  00000000  00000000  00002a04  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003a9  00000000  00000000  00002e45  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000148  00000000  00000000  000031ee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 c2 01 	call	0x384	; 0x384 <main>
  64:	0c 94 1b 02 	jmp	0x436	; 0x436 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Btn0_Init>:
#include "MyKit.h"
#include "GPIO.h"

void Btn0_Init(void)
{
	Dir_B(in_pin , 0);
  6c:	60 e0       	ldi	r22, 0x00	; 0
  6e:	70 e0       	ldi	r23, 0x00	; 0
  70:	80 e0       	ldi	r24, 0x00	; 0
  72:	0e 94 01 01 	call	0x202	; 0x202 <Dir_B>
  76:	08 95       	ret

00000078 <Btn1_Init>:
}
void Btn1_Init(void)
{
	Dir_D(in_pin, 6);
  78:	66 e0       	ldi	r22, 0x06	; 6
  7a:	70 e0       	ldi	r23, 0x00	; 0
  7c:	80 e0       	ldi	r24, 0x00	; 0
  7e:	0e 94 51 01 	call	0x2a2	; 0x2a2 <Dir_D>
  82:	08 95       	ret

00000084 <Btn2_Init>:
}
void Btn2_Init(void)
{
	Dir_D(in_pin ,2);
  84:	62 e0       	ldi	r22, 0x02	; 2
  86:	70 e0       	ldi	r23, 0x00	; 0
  88:	80 e0       	ldi	r24, 0x00	; 0
  8a:	0e 94 51 01 	call	0x2a2	; 0x2a2 <Dir_D>
  8e:	08 95       	ret

00000090 <IsPressed_Btn0>:
}

int IsPressed_Btn0(void)
{
	if (IsPressed_B(BtnB0))
  90:	80 e0       	ldi	r24, 0x00	; 0
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	0e 94 85 00 	call	0x10a	; 0x10a <IsPressed_B>
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	30 e0       	ldi	r19, 0x00	; 0
  9c:	81 11       	cpse	r24, r1
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <IsPressed_Btn0+0x14>
  a0:	20 e0       	ldi	r18, 0x00	; 0
  a2:	30 e0       	ldi	r19, 0x00	; 0
		return 1;
	else
		return 0;
}
  a4:	c9 01       	movw	r24, r18
  a6:	08 95       	ret

000000a8 <IsPressed_Btn1>:
int IsPressed_Btn1(void)
{
	if (IsPressed_D(BtnD1))
  a8:	86 e0       	ldi	r24, 0x06	; 6
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	0e 94 90 00 	call	0x120	; 0x120 <IsPressed_D>
  b0:	21 e0       	ldi	r18, 0x01	; 1
  b2:	30 e0       	ldi	r19, 0x00	; 0
  b4:	81 11       	cpse	r24, r1
  b6:	02 c0       	rjmp	.+4      	; 0xbc <IsPressed_Btn1+0x14>
  b8:	20 e0       	ldi	r18, 0x00	; 0
  ba:	30 e0       	ldi	r19, 0x00	; 0
	return 1;
	else
	return 0;
}
  bc:	c9 01       	movw	r24, r18
  be:	08 95       	ret

000000c0 <IsPressed_Btn2>:
int IsPressed_Btn2(void)
{
	if (IsPressed_D(BtnD2))
  c0:	82 e0       	ldi	r24, 0x02	; 2
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	0e 94 90 00 	call	0x120	; 0x120 <IsPressed_D>
  c8:	21 e0       	ldi	r18, 0x01	; 1
  ca:	30 e0       	ldi	r19, 0x00	; 0
  cc:	81 11       	cpse	r24, r1
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <IsPressed_Btn2+0x14>
  d0:	20 e0       	ldi	r18, 0x00	; 0
  d2:	30 e0       	ldi	r19, 0x00	; 0
	return 1;
	else
	return 0;
  d4:	c9 01       	movw	r24, r18
  d6:	08 95       	ret

000000d8 <BzrInit>:
#include "MyKit.h"


void BzrInit(void)
{
	Dir_A(out_pin,BzrPinA);	
  d8:	63 e0       	ldi	r22, 0x03	; 3
  da:	70 e0       	ldi	r23, 0x00	; 0
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <Dir_A>
  e2:	08 95       	ret

000000e4 <_BzrA3>:
}
void _BzrA3(char state)
{
	switch (state)
  e4:	88 23       	and	r24, r24
  e6:	39 f0       	breq	.+14     	; 0xf6 <_BzrA3+0x12>
  e8:	81 30       	cpi	r24, 0x01	; 1
  ea:	51 f4       	brne	.+20     	; 0x100 <_BzrA3+0x1c>
	{
		case ON:
		SetPin_A(BzrPinA);
  ec:	83 e0       	ldi	r24, 0x03	; 3
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	0e 94 9b 00 	call	0x136	; 0x136 <SetPin_A>
		break;
  f4:	08 95       	ret
		case OFF:
		ReSetPin_A(BzrPinA);
  f6:	83 e0       	ldi	r24, 0x03	; 3
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	0e 94 bc 00 	call	0x178	; 0x178 <ReSetPin_A>
		break;
  fe:	08 95       	ret
		default:
		ReSetPin_A(BzrPinA);
 100:	83 e0       	ldi	r24, 0x03	; 3
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	0e 94 bc 00 	call	0x178	; 0x178 <ReSetPin_A>
 108:	08 95       	ret

0000010a <IsPressed_B>:
{
	PORTC ^= 1<<PinNUM;
}
void Toggle_D(int PinNUM)
{
	PORTD ^= 1<<PinNUM;
 10a:	26 b3       	in	r18, 0x16	; 22
 10c:	30 e0       	ldi	r19, 0x00	; 0
 10e:	a9 01       	movw	r20, r18
 110:	02 c0       	rjmp	.+4      	; 0x116 <IsPressed_B+0xc>
 112:	55 95       	asr	r21
 114:	47 95       	ror	r20
 116:	8a 95       	dec	r24
 118:	e2 f7       	brpl	.-8      	; 0x112 <IsPressed_B+0x8>
 11a:	ca 01       	movw	r24, r20
 11c:	81 70       	andi	r24, 0x01	; 1
 11e:	08 95       	ret

00000120 <IsPressed_D>:
 120:	20 b3       	in	r18, 0x10	; 16
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	a9 01       	movw	r20, r18
 126:	02 c0       	rjmp	.+4      	; 0x12c <IsPressed_D+0xc>
 128:	55 95       	asr	r21
 12a:	47 95       	ror	r20
 12c:	8a 95       	dec	r24
 12e:	e2 f7       	brpl	.-8      	; 0x128 <IsPressed_D+0x8>
 130:	ca 01       	movw	r24, r20
 132:	81 70       	andi	r24, 0x01	; 1
 134:	08 95       	ret

00000136 <SetPin_A>:
 136:	9b b3       	in	r25, 0x1b	; 27
 138:	21 e0       	ldi	r18, 0x01	; 1
 13a:	30 e0       	ldi	r19, 0x00	; 0
 13c:	02 c0       	rjmp	.+4      	; 0x142 <SetPin_A+0xc>
 13e:	22 0f       	add	r18, r18
 140:	33 1f       	adc	r19, r19
 142:	8a 95       	dec	r24
 144:	e2 f7       	brpl	.-8      	; 0x13e <SetPin_A+0x8>
 146:	29 2b       	or	r18, r25
 148:	2b bb       	out	0x1b, r18	; 27
 14a:	08 95       	ret

0000014c <SetPin_C>:
 14c:	95 b3       	in	r25, 0x15	; 21
 14e:	21 e0       	ldi	r18, 0x01	; 1
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	02 c0       	rjmp	.+4      	; 0x158 <SetPin_C+0xc>
 154:	22 0f       	add	r18, r18
 156:	33 1f       	adc	r19, r19
 158:	8a 95       	dec	r24
 15a:	e2 f7       	brpl	.-8      	; 0x154 <SetPin_C+0x8>
 15c:	29 2b       	or	r18, r25
 15e:	25 bb       	out	0x15, r18	; 21
 160:	08 95       	ret

00000162 <SetPin_D>:
 162:	92 b3       	in	r25, 0x12	; 18
 164:	21 e0       	ldi	r18, 0x01	; 1
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	02 c0       	rjmp	.+4      	; 0x16e <SetPin_D+0xc>
 16a:	22 0f       	add	r18, r18
 16c:	33 1f       	adc	r19, r19
 16e:	8a 95       	dec	r24
 170:	e2 f7       	brpl	.-8      	; 0x16a <SetPin_D+0x8>
 172:	29 2b       	or	r18, r25
 174:	22 bb       	out	0x12, r18	; 18
 176:	08 95       	ret

00000178 <ReSetPin_A>:
 178:	9b b3       	in	r25, 0x1b	; 27
 17a:	21 e0       	ldi	r18, 0x01	; 1
 17c:	30 e0       	ldi	r19, 0x00	; 0
 17e:	02 c0       	rjmp	.+4      	; 0x184 <ReSetPin_A+0xc>
 180:	22 0f       	add	r18, r18
 182:	33 1f       	adc	r19, r19
 184:	8a 95       	dec	r24
 186:	e2 f7       	brpl	.-8      	; 0x180 <ReSetPin_A+0x8>
 188:	20 95       	com	r18
 18a:	29 23       	and	r18, r25
 18c:	2b bb       	out	0x1b, r18	; 27
 18e:	08 95       	ret

00000190 <ReSetPin_C>:
 190:	95 b3       	in	r25, 0x15	; 21
 192:	21 e0       	ldi	r18, 0x01	; 1
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	02 c0       	rjmp	.+4      	; 0x19c <ReSetPin_C+0xc>
 198:	22 0f       	add	r18, r18
 19a:	33 1f       	adc	r19, r19
 19c:	8a 95       	dec	r24
 19e:	e2 f7       	brpl	.-8      	; 0x198 <ReSetPin_C+0x8>
 1a0:	20 95       	com	r18
 1a2:	29 23       	and	r18, r25
 1a4:	25 bb       	out	0x15, r18	; 21
 1a6:	08 95       	ret

000001a8 <ReSetPin_D>:
 1a8:	92 b3       	in	r25, 0x12	; 18
 1aa:	21 e0       	ldi	r18, 0x01	; 1
 1ac:	30 e0       	ldi	r19, 0x00	; 0
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <ReSetPin_D+0xc>
 1b0:	22 0f       	add	r18, r18
 1b2:	33 1f       	adc	r19, r19
 1b4:	8a 95       	dec	r24
 1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <ReSetPin_D+0x8>
 1b8:	20 95       	com	r18
 1ba:	29 23       	and	r18, r25
 1bc:	22 bb       	out	0x12, r18	; 18
 1be:	08 95       	ret

000001c0 <Dir_A>:
}


void Dir_A(char state,int PinNum)
{
	switch(state)
 1c0:	88 23       	and	r24, r24
 1c2:	19 f0       	breq	.+6      	; 0x1ca <Dir_A+0xa>
 1c4:	81 30       	cpi	r24, 0x01	; 1
 1c6:	69 f0       	breq	.+26     	; 0x1e2 <Dir_A+0x22>
 1c8:	17 c0       	rjmp	.+46     	; 0x1f8 <Dir_A+0x38>
	{
		case in_pin:
			DDRA &= ~(1<<PinNum);
 1ca:	2a b3       	in	r18, 0x1a	; 26
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <Dir_A+0x16>
 1d2:	88 0f       	add	r24, r24
 1d4:	99 1f       	adc	r25, r25
 1d6:	6a 95       	dec	r22
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <Dir_A+0x12>
 1da:	80 95       	com	r24
 1dc:	82 23       	and	r24, r18
 1de:	8a bb       	out	0x1a, r24	; 26
			break;
 1e0:	08 95       	ret
		case out_pin:
			DDRA |= 1<<PinNum;
 1e2:	2a b3       	in	r18, 0x1a	; 26
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <Dir_A+0x2e>
 1ea:	88 0f       	add	r24, r24
 1ec:	99 1f       	adc	r25, r25
 1ee:	6a 95       	dec	r22
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <Dir_A+0x2a>
 1f2:	82 2b       	or	r24, r18
 1f4:	8a bb       	out	0x1a, r24	; 26
			break;
 1f6:	08 95       	ret
 1f8:	97 2f       	mov	r25, r23
 1fa:	86 2f       	mov	r24, r22
		default:
			ReSetPin_A(PinNum);
 1fc:	0e 94 bc 00 	call	0x178	; 0x178 <ReSetPin_A>
 200:	08 95       	ret

00000202 <Dir_B>:
	}
}

void Dir_B(char state,int PinNum)
{
	switch(state)
 202:	88 23       	and	r24, r24
 204:	19 f0       	breq	.+6      	; 0x20c <Dir_B+0xa>
 206:	81 30       	cpi	r24, 0x01	; 1
 208:	69 f0       	breq	.+26     	; 0x224 <Dir_B+0x22>
 20a:	17 c0       	rjmp	.+46     	; 0x23a <Dir_B+0x38>
	{
		case in_pin:
		DDRB &= ~(1<<PinNum);
 20c:	27 b3       	in	r18, 0x17	; 23
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	02 c0       	rjmp	.+4      	; 0x218 <Dir_B+0x16>
 214:	88 0f       	add	r24, r24
 216:	99 1f       	adc	r25, r25
 218:	6a 95       	dec	r22
 21a:	e2 f7       	brpl	.-8      	; 0x214 <Dir_B+0x12>
 21c:	80 95       	com	r24
 21e:	82 23       	and	r24, r18
 220:	87 bb       	out	0x17, r24	; 23
		break;
 222:	08 95       	ret
		case out_pin:
		DDRB |= 1<<PinNum;
 224:	27 b3       	in	r18, 0x17	; 23
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	02 c0       	rjmp	.+4      	; 0x230 <Dir_B+0x2e>
 22c:	88 0f       	add	r24, r24
 22e:	99 1f       	adc	r25, r25
 230:	6a 95       	dec	r22
 232:	e2 f7       	brpl	.-8      	; 0x22c <Dir_B+0x2a>
 234:	82 2b       	or	r24, r18
 236:	87 bb       	out	0x17, r24	; 23
		break;
 238:	08 95       	ret
		default:
		DDRB &= ~(1<<PinNum);
 23a:	27 b3       	in	r18, 0x17	; 23
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	02 c0       	rjmp	.+4      	; 0x246 <Dir_B+0x44>
 242:	88 0f       	add	r24, r24
 244:	99 1f       	adc	r25, r25
 246:	6a 95       	dec	r22
 248:	e2 f7       	brpl	.-8      	; 0x242 <Dir_B+0x40>
 24a:	80 95       	com	r24
 24c:	82 23       	and	r24, r18
 24e:	87 bb       	out	0x17, r24	; 23
 250:	08 95       	ret

00000252 <Dir_C>:
	}
}

void Dir_C(char state,int PinNum)
{
	switch(state)
 252:	88 23       	and	r24, r24
 254:	19 f0       	breq	.+6      	; 0x25c <Dir_C+0xa>
 256:	81 30       	cpi	r24, 0x01	; 1
 258:	69 f0       	breq	.+26     	; 0x274 <Dir_C+0x22>
 25a:	17 c0       	rjmp	.+46     	; 0x28a <Dir_C+0x38>
	{
		case in_pin:
		DDRC &= ~(1<<PinNum);
 25c:	24 b3       	in	r18, 0x14	; 20
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	02 c0       	rjmp	.+4      	; 0x268 <Dir_C+0x16>
 264:	88 0f       	add	r24, r24
 266:	99 1f       	adc	r25, r25
 268:	6a 95       	dec	r22
 26a:	e2 f7       	brpl	.-8      	; 0x264 <Dir_C+0x12>
 26c:	80 95       	com	r24
 26e:	82 23       	and	r24, r18
 270:	84 bb       	out	0x14, r24	; 20
		break;
 272:	08 95       	ret
		case out_pin:
		DDRC |= 1<<PinNum;
 274:	24 b3       	in	r18, 0x14	; 20
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	02 c0       	rjmp	.+4      	; 0x280 <Dir_C+0x2e>
 27c:	88 0f       	add	r24, r24
 27e:	99 1f       	adc	r25, r25
 280:	6a 95       	dec	r22
 282:	e2 f7       	brpl	.-8      	; 0x27c <Dir_C+0x2a>
 284:	82 2b       	or	r24, r18
 286:	84 bb       	out	0x14, r24	; 20
		break;
 288:	08 95       	ret
		default:
		DDRC &= ~(1<<PinNum);
 28a:	24 b3       	in	r18, 0x14	; 20
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	02 c0       	rjmp	.+4      	; 0x296 <Dir_C+0x44>
 292:	88 0f       	add	r24, r24
 294:	99 1f       	adc	r25, r25
 296:	6a 95       	dec	r22
 298:	e2 f7       	brpl	.-8      	; 0x292 <Dir_C+0x40>
 29a:	80 95       	com	r24
 29c:	82 23       	and	r24, r18
 29e:	84 bb       	out	0x14, r24	; 20
 2a0:	08 95       	ret

000002a2 <Dir_D>:
	}
}

void Dir_D(char state,int PinNum)
{
	switch(state)
 2a2:	88 23       	and	r24, r24
 2a4:	19 f0       	breq	.+6      	; 0x2ac <Dir_D+0xa>
 2a6:	81 30       	cpi	r24, 0x01	; 1
 2a8:	69 f0       	breq	.+26     	; 0x2c4 <Dir_D+0x22>
 2aa:	17 c0       	rjmp	.+46     	; 0x2da <Dir_D+0x38>
	{
		case in_pin:
		DDRD &= ~(1<<PinNum);
 2ac:	21 b3       	in	r18, 0x11	; 17
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <Dir_D+0x16>
 2b4:	88 0f       	add	r24, r24
 2b6:	99 1f       	adc	r25, r25
 2b8:	6a 95       	dec	r22
 2ba:	e2 f7       	brpl	.-8      	; 0x2b4 <Dir_D+0x12>
 2bc:	80 95       	com	r24
 2be:	82 23       	and	r24, r18
 2c0:	81 bb       	out	0x11, r24	; 17
		break;
 2c2:	08 95       	ret
		case out_pin:
		DDRD |= 1<<PinNum;
 2c4:	21 b3       	in	r18, 0x11	; 17
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <Dir_D+0x2e>
 2cc:	88 0f       	add	r24, r24
 2ce:	99 1f       	adc	r25, r25
 2d0:	6a 95       	dec	r22
 2d2:	e2 f7       	brpl	.-8      	; 0x2cc <Dir_D+0x2a>
 2d4:	82 2b       	or	r24, r18
 2d6:	81 bb       	out	0x11, r24	; 17
		break;
 2d8:	08 95       	ret
		default:
		DDRD &= ~(1<<PinNum);
 2da:	21 b3       	in	r18, 0x11	; 17
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <Dir_D+0x44>
 2e2:	88 0f       	add	r24, r24
 2e4:	99 1f       	adc	r25, r25
 2e6:	6a 95       	dec	r22
 2e8:	e2 f7       	brpl	.-8      	; 0x2e2 <Dir_D+0x40>
 2ea:	80 95       	com	r24
 2ec:	82 23       	and	r24, r18
 2ee:	81 bb       	out	0x11, r24	; 17
 2f0:	08 95       	ret

000002f2 <LEDInit>:
#include "MyKit.h"
#include "GPIO.h"

void LEDInit(void)
{
	Dir_C(out_pin,LEDC0);
 2f2:	62 e0       	ldi	r22, 0x02	; 2
 2f4:	70 e0       	ldi	r23, 0x00	; 0
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	0e 94 29 01 	call	0x252	; 0x252 <Dir_C>
	Dir_C(out_pin,LEDC1);
 2fc:	67 e0       	ldi	r22, 0x07	; 7
 2fe:	70 e0       	ldi	r23, 0x00	; 0
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	0e 94 29 01 	call	0x252	; 0x252 <Dir_C>
	Dir_D(out_pin,LEDD2);
 306:	63 e0       	ldi	r22, 0x03	; 3
 308:	70 e0       	ldi	r23, 0x00	; 0
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	0e 94 51 01 	call	0x2a2	; 0x2a2 <Dir_D>
 310:	08 95       	ret

00000312 <_Led0>:
}

void _Led0(char state)
{
	switch(state)
 312:	88 23       	and	r24, r24
 314:	39 f0       	breq	.+14     	; 0x324 <_Led0+0x12>
 316:	81 30       	cpi	r24, 0x01	; 1
 318:	51 f4       	brne	.+20     	; 0x32e <_Led0+0x1c>
	{
		case ON:
		SetPin_C(LEDC0);
 31a:	82 e0       	ldi	r24, 0x02	; 2
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	0e 94 a6 00 	call	0x14c	; 0x14c <SetPin_C>
		break;
 322:	08 95       	ret
		case OFF:
		ReSetPin_C(LEDC0);
 324:	82 e0       	ldi	r24, 0x02	; 2
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	0e 94 c8 00 	call	0x190	; 0x190 <ReSetPin_C>
		break;
 32c:	08 95       	ret
		default:
		ReSetPin_C(LEDC0);
 32e:	82 e0       	ldi	r24, 0x02	; 2
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	0e 94 c8 00 	call	0x190	; 0x190 <ReSetPin_C>
 336:	08 95       	ret

00000338 <_Led1>:
	}
}
void _Led1(char state)
{
	switch(state)
 338:	88 23       	and	r24, r24
 33a:	39 f0       	breq	.+14     	; 0x34a <_Led1+0x12>
 33c:	81 30       	cpi	r24, 0x01	; 1
 33e:	51 f4       	brne	.+20     	; 0x354 <_Led1+0x1c>
	{
		case ON:
		SetPin_C(LEDC1);
 340:	87 e0       	ldi	r24, 0x07	; 7
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	0e 94 a6 00 	call	0x14c	; 0x14c <SetPin_C>
		break;
 348:	08 95       	ret
		case OFF:
		ReSetPin_C(LEDC1);
 34a:	87 e0       	ldi	r24, 0x07	; 7
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	0e 94 c8 00 	call	0x190	; 0x190 <ReSetPin_C>
		break;
 352:	08 95       	ret
		default:
		ReSetPin_C(LEDC1);
 354:	87 e0       	ldi	r24, 0x07	; 7
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	0e 94 c8 00 	call	0x190	; 0x190 <ReSetPin_C>
 35c:	08 95       	ret

0000035e <_Led2>:
	}
}
void _Led2(char state)
{
	switch(state)
 35e:	88 23       	and	r24, r24
 360:	39 f0       	breq	.+14     	; 0x370 <_Led2+0x12>
 362:	81 30       	cpi	r24, 0x01	; 1
 364:	51 f4       	brne	.+20     	; 0x37a <_Led2+0x1c>
	{
		case ON:
		SetPin_D(LEDD2);
 366:	83 e0       	ldi	r24, 0x03	; 3
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	0e 94 b1 00 	call	0x162	; 0x162 <SetPin_D>
		break;
 36e:	08 95       	ret
		case OFF:
		ReSetPin_D(LEDD2);
 370:	83 e0       	ldi	r24, 0x03	; 3
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <ReSetPin_D>
		break;
 378:	08 95       	ret
		default:
		ReSetPin_D(LEDD2);
 37a:	83 e0       	ldi	r24, 0x03	; 3
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <ReSetPin_D>
 382:	08 95       	ret

00000384 <main>:
*/


int main(void)
{
	LEDInit();
 384:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LEDInit>
	RelayInit();
 388:	0e 94 02 02 	call	0x404	; 0x404 <RelayInit>
	BzrInit();
 38c:	0e 94 6c 00 	call	0xd8	; 0xd8 <BzrInit>
	
	Btn0_Init();
 390:	0e 94 36 00 	call	0x6c	; 0x6c <Btn0_Init>
	Btn1_Init();
 394:	0e 94 3c 00 	call	0x78	; 0x78 <Btn1_Init>
	Btn2_Init();
 398:	0e 94 42 00 	call	0x84	; 0x84 <Btn2_Init>
	
	while(1)
	{
		if (IsPressed_Btn0())
 39c:	0e 94 48 00 	call	0x90	; 0x90 <IsPressed_Btn0>
 3a0:	89 2b       	or	r24, r25
 3a2:	51 f0       	breq	.+20     	; 0x3b8 <main+0x34>
		{
			
			_Led0(ON);
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	0e 94 89 01 	call	0x312	; 0x312 <_Led0>
			_Relay(ON);
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	0e 94 08 02 	call	0x410	; 0x410 <_Relay>
			_BzrA3(OFF);
 3b0:	80 e0       	ldi	r24, 0x00	; 0
 3b2:	0e 94 72 00 	call	0xe4	; 0xe4 <_BzrA3>
 3b6:	03 c0       	rjmp	.+6      	; 0x3be <main+0x3a>
		}
		else
		{
			_Led0(OFF);
 3b8:	80 e0       	ldi	r24, 0x00	; 0
 3ba:	0e 94 89 01 	call	0x312	; 0x312 <_Led0>
		}
		
		if (IsPressed_Btn1())
 3be:	0e 94 54 00 	call	0xa8	; 0xa8 <IsPressed_Btn1>
 3c2:	89 2b       	or	r24, r25
 3c4:	51 f0       	breq	.+20     	; 0x3da <main+0x56>
		{
			_Led1(ON);
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	0e 94 9c 01 	call	0x338	; 0x338 <_Led1>
			_Relay(OFF);
 3cc:	80 e0       	ldi	r24, 0x00	; 0
 3ce:	0e 94 08 02 	call	0x410	; 0x410 <_Relay>
			_BzrA3(ON);
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	0e 94 72 00 	call	0xe4	; 0xe4 <_BzrA3>
 3d8:	03 c0       	rjmp	.+6      	; 0x3e0 <main+0x5c>
		}
		else
		{
			_Led1(OFF);
 3da:	80 e0       	ldi	r24, 0x00	; 0
 3dc:	0e 94 9c 01 	call	0x338	; 0x338 <_Led1>
		}
		if (IsPressed_Btn2())
 3e0:	0e 94 60 00 	call	0xc0	; 0xc0 <IsPressed_Btn2>
 3e4:	89 2b       	or	r24, r25
 3e6:	51 f0       	breq	.+20     	; 0x3fc <main+0x78>
		{
			_Led2(ON);
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	0e 94 af 01 	call	0x35e	; 0x35e <_Led2>
			_Relay(ON);
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	0e 94 08 02 	call	0x410	; 0x410 <_Relay>
			_BzrA3(OFF);
 3f4:	80 e0       	ldi	r24, 0x00	; 0
 3f6:	0e 94 72 00 	call	0xe4	; 0xe4 <_BzrA3>
 3fa:	d0 cf       	rjmp	.-96     	; 0x39c <main+0x18>
		}
		else
		{
			_Led2(OFF);
 3fc:	80 e0       	ldi	r24, 0x00	; 0
 3fe:	0e 94 af 01 	call	0x35e	; 0x35e <_Led2>
 402:	cc cf       	rjmp	.-104    	; 0x39c <main+0x18>

00000404 <RelayInit>:



void RelayInit(void)
{
	Dir_A(out_pin,RelayPinA);
 404:	62 e0       	ldi	r22, 0x02	; 2
 406:	70 e0       	ldi	r23, 0x00	; 0
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <Dir_A>
 40e:	08 95       	ret

00000410 <_Relay>:
}

void _Relay(char state)
{
	switch (state)
 410:	88 23       	and	r24, r24
 412:	39 f0       	breq	.+14     	; 0x422 <_Relay+0x12>
 414:	81 30       	cpi	r24, 0x01	; 1
 416:	51 f4       	brne	.+20     	; 0x42c <_Relay+0x1c>
	{
		case ON:
			SetPin_A(RelayPinA);
 418:	82 e0       	ldi	r24, 0x02	; 2
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	0e 94 9b 00 	call	0x136	; 0x136 <SetPin_A>
			break;
 420:	08 95       	ret
		case OFF:
			ReSetPin_A(RelayPinA);
 422:	82 e0       	ldi	r24, 0x02	; 2
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	0e 94 bc 00 	call	0x178	; 0x178 <ReSetPin_A>
			break;
 42a:	08 95       	ret
		default:
			ReSetPin_A(RelayPinA);
 42c:	82 e0       	ldi	r24, 0x02	; 2
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	0e 94 bc 00 	call	0x178	; 0x178 <ReSetPin_A>
 434:	08 95       	ret

00000436 <_exit>:
 436:	f8 94       	cli

00000438 <__stop_program>:
 438:	ff cf       	rjmp	.-2      	; 0x438 <__stop_program>
