
5th Project GPIO interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000144  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000174  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000138  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000be5  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000682  00000000  00000000  00000ecd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006ca  00000000  00000000  0000154f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000022c  00000000  00000000  00001c1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000434  00000000  00000000  00001e48  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000386  00000000  00000000  0000227c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000108  00000000  00000000  00002602  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__vector_2>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 68 00 	call	0xd0	; 0xd0 <main>
  64:	0c 94 76 00 	jmp	0xec	; 0xec <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <ExtINT1_Init>:
	{
		
	}
	
	//interrupt Enable
	GICR |= (1<<INT2);
  6c:	24 b7       	in	r18, 0x34	; 52
  6e:	88 0f       	add	r24, r24
  70:	99 1f       	adc	r25, r25
  72:	88 0f       	add	r24, r24
  74:	99 1f       	adc	r25, r25
  76:	82 2b       	or	r24, r18
  78:	84 bf       	out	0x34, r24	; 52
  7a:	8b b7       	in	r24, 0x3b	; 59
  7c:	80 68       	ori	r24, 0x80	; 128
  7e:	8b bf       	out	0x3b, r24	; 59
  80:	08 95       	ret

00000082 <ExtINT_disable>:
}


void  ExtINT_disable(int INTnumber)
{
	GICR &= ~(1<<INTnumber);
  82:	9b b7       	in	r25, 0x3b	; 59
  84:	21 e0       	ldi	r18, 0x01	; 1
  86:	30 e0       	ldi	r19, 0x00	; 0
  88:	02 c0       	rjmp	.+4      	; 0x8e <ExtINT_disable+0xc>
  8a:	22 0f       	add	r18, r18
  8c:	33 1f       	adc	r19, r19
  8e:	8a 95       	dec	r24
  90:	e2 f7       	brpl	.-8      	; 0x8a <ExtINT_disable+0x8>
  92:	20 95       	com	r18
  94:	29 23       	and	r18, r25
  96:	2b bf       	out	0x3b, r18	; 59
  98:	08 95       	ret

0000009a <Config_A>:
}


void Config_A(char state)
{
	switch(state)
  9a:	88 23       	and	r24, r24
  9c:	19 f0       	breq	.+6      	; 0xa4 <Config_A+0xa>
  9e:	81 30       	cpi	r24, 0x01	; 1
  a0:	19 f0       	breq	.+6      	; 0xa8 <Config_A+0xe>
  a2:	05 c0       	rjmp	.+10     	; 0xae <Config_A+0x14>
	{
		case in_Port:
			DDRA = 0x00;
  a4:	1a ba       	out	0x1a, r1	; 26
			break;
  a6:	08 95       	ret
		case out_Port:
			DDRA = 0xff;
  a8:	8f ef       	ldi	r24, 0xFF	; 255
  aa:	8a bb       	out	0x1a, r24	; 26
			break;
  ac:	08 95       	ret
		default:
		DDRA = 0x00; 
  ae:	1a ba       	out	0x1a, r1	; 26
  b0:	08 95       	ret

000000b2 <__vector_2>:
#include "ExtInterrupt.h"
#include "GPIO.h"
#include "MyKit.h"

ISR(INT1_vect)
{
  b2:	1f 92       	push	r1
  b4:	0f 92       	push	r0
  b6:	0f b6       	in	r0, 0x3f	; 63
  b8:	0f 92       	push	r0
  ba:	11 24       	eor	r1, r1
  bc:	8f 93       	push	r24
	PORTA ^= 0xFF; 
  be:	8b b3       	in	r24, 0x1b	; 27
  c0:	80 95       	com	r24
  c2:	8b bb       	out	0x1b, r24	; 27
}
  c4:	8f 91       	pop	r24
  c6:	0f 90       	pop	r0
  c8:	0f be       	out	0x3f, r0	; 63
  ca:	0f 90       	pop	r0
  cc:	1f 90       	pop	r1
  ce:	18 95       	reti

000000d0 <main>:
int main(void)
{
    /* Replace with your application code */
	Config_A(out_Port);
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	0e 94 4d 00 	call	0x9a	; 0x9a <Config_A>
	PORTA = 0;
  d6:	1b ba       	out	0x1b, r1	; 27
	
	ExtINT_disable(INT1);
  d8:	87 e0       	ldi	r24, 0x07	; 7
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 41 00 	call	0x82	; 0x82 <ExtINT_disable>
	ExtINT1_Init(FallingEdge);
  e0:	83 e0       	ldi	r24, 0x03	; 3
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 36 00 	call	0x6c	; 0x6c <ExtINT1_Init>
	sei();
  e8:	78 94       	sei
  ea:	ff cf       	rjmp	.-2      	; 0xea <main+0x1a>

000000ec <_exit>:
  ec:	f8 94       	cli

000000ee <__stop_program>:
  ee:	ff cf       	rjmp	.-2      	; 0xee <__stop_program>
