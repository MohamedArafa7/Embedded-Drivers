
Final Project_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000094a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000099e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000099e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000009d0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000240  00000000  00000000  00000a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001747  00000000  00000000  00000c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009c1  00000000  00000000  00002393  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000d32  00000000  00000000  00002d54  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004b8  00000000  00000000  00003a88  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005bf  00000000  00000000  00003f40  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000009dc  00000000  00000000  000044ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001f0  00000000  00000000  00004edb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
   8:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
   c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  10:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  14:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  18:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  1c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  20:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  24:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  28:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  2c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  30:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__vector_12>
  34:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__vector_13>
  38:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  3c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  40:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  44:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  48:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  4c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  50:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  54:	25 01       	movw	r4, r10
  56:	2c 01       	movw	r4, r24
  58:	33 01       	movw	r6, r6
  5a:	3a 01       	movw	r6, r20
  5c:	40 01       	movw	r8, r0
  5e:	40 01       	movw	r8, r0
  60:	40 01       	movw	r8, r0
  62:	40 01       	movw	r8, r0
  64:	40 01       	movw	r8, r0
  66:	40 01       	movw	r8, r0
  68:	40 01       	movw	r8, r0
  6a:	40 01       	movw	r8, r0
  6c:	40 01       	movw	r8, r0
  6e:	40 01       	movw	r8, r0
  70:	40 01       	movw	r8, r0
  72:	40 01       	movw	r8, r0
  74:	40 01       	movw	r8, r0
  76:	40 01       	movw	r8, r0
  78:	40 01       	movw	r8, r0
  7a:	40 01       	movw	r8, r0
  7c:	40 01       	movw	r8, r0
  7e:	40 01       	movw	r8, r0
  80:	40 01       	movw	r8, r0
  82:	40 01       	movw	r8, r0
  84:	40 01       	movw	r8, r0
  86:	40 01       	movw	r8, r0
  88:	40 01       	movw	r8, r0
  8a:	40 01       	movw	r8, r0
  8c:	40 01       	movw	r8, r0
  8e:	40 01       	movw	r8, r0
  90:	40 01       	movw	r8, r0
  92:	40 01       	movw	r8, r0
  94:	25 01       	movw	r4, r10
  96:	2c 01       	movw	r4, r24
  98:	33 01       	movw	r6, r6
  9a:	3a 01       	movw	r6, r20
  9c:	74 01       	movw	r14, r8
  9e:	78 01       	movw	r14, r16
  a0:	7c 01       	movw	r14, r24
  a2:	80 01       	movw	r16, r0
  a4:	83 01       	movw	r16, r6
  a6:	83 01       	movw	r16, r6
  a8:	83 01       	movw	r16, r6
  aa:	83 01       	movw	r16, r6
  ac:	83 01       	movw	r16, r6
  ae:	83 01       	movw	r16, r6
  b0:	83 01       	movw	r16, r6
  b2:	83 01       	movw	r16, r6
  b4:	83 01       	movw	r16, r6
  b6:	83 01       	movw	r16, r6
  b8:	83 01       	movw	r16, r6
  ba:	83 01       	movw	r16, r6
  bc:	83 01       	movw	r16, r6
  be:	83 01       	movw	r16, r6
  c0:	83 01       	movw	r16, r6
  c2:	83 01       	movw	r16, r6
  c4:	83 01       	movw	r16, r6
  c6:	83 01       	movw	r16, r6
  c8:	83 01       	movw	r16, r6
  ca:	83 01       	movw	r16, r6
  cc:	83 01       	movw	r16, r6
  ce:	83 01       	movw	r16, r6
  d0:	83 01       	movw	r16, r6
  d2:	83 01       	movw	r16, r6
  d4:	83 01       	movw	r16, r6
  d6:	83 01       	movw	r16, r6
  d8:	83 01       	movw	r16, r6
  da:	83 01       	movw	r16, r6
  dc:	74 01       	movw	r14, r8
  de:	78 01       	movw	r14, r16
  e0:	7c 01       	movw	r14, r24
  e2:	80 01       	movw	r16, r0

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf e5       	ldi	r28, 0x5F	; 95
  ea:	d8 e0       	ldi	r29, 0x08	; 8
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	0e 94 94 01 	call	0x328	; 0x328 <main>
  f4:	0c 94 a3 04 	jmp	0x946	; 0x946 <_exit>

000000f8 <__bad_interrupt>:
  f8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000fc <SetPin_C>:
		break;
		case out_pin:
		DDRB |= 1<<PinNum;
		break;
		default:
		DDRB &= ~(1<<PinNum);
  fc:	95 b3       	in	r25, 0x15	; 21
  fe:	21 e0       	ldi	r18, 0x01	; 1
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	02 c0       	rjmp	.+4      	; 0x108 <SetPin_C+0xc>
 104:	22 0f       	add	r18, r18
 106:	33 1f       	adc	r19, r19
 108:	8a 95       	dec	r24
 10a:	e2 f7       	brpl	.-8      	; 0x104 <SetPin_C+0x8>
 10c:	29 2b       	or	r18, r25
 10e:	25 bb       	out	0x15, r18	; 21
 110:	08 95       	ret

00000112 <SetPin_D>:
 112:	92 b3       	in	r25, 0x12	; 18
 114:	21 e0       	ldi	r18, 0x01	; 1
 116:	30 e0       	ldi	r19, 0x00	; 0
 118:	02 c0       	rjmp	.+4      	; 0x11e <SetPin_D+0xc>
 11a:	22 0f       	add	r18, r18
 11c:	33 1f       	adc	r19, r19
 11e:	8a 95       	dec	r24
 120:	e2 f7       	brpl	.-8      	; 0x11a <SetPin_D+0x8>
 122:	29 2b       	or	r18, r25
 124:	22 bb       	out	0x12, r18	; 18
 126:	08 95       	ret

00000128 <ReSetPin_C>:
 128:	95 b3       	in	r25, 0x15	; 21
 12a:	21 e0       	ldi	r18, 0x01	; 1
 12c:	30 e0       	ldi	r19, 0x00	; 0
 12e:	02 c0       	rjmp	.+4      	; 0x134 <ReSetPin_C+0xc>
 130:	22 0f       	add	r18, r18
 132:	33 1f       	adc	r19, r19
 134:	8a 95       	dec	r24
 136:	e2 f7       	brpl	.-8      	; 0x130 <ReSetPin_C+0x8>
 138:	20 95       	com	r18
 13a:	29 23       	and	r18, r25
 13c:	25 bb       	out	0x15, r18	; 21
 13e:	08 95       	ret

00000140 <ReSetPin_D>:
 140:	92 b3       	in	r25, 0x12	; 18
 142:	21 e0       	ldi	r18, 0x01	; 1
 144:	30 e0       	ldi	r19, 0x00	; 0
 146:	02 c0       	rjmp	.+4      	; 0x14c <ReSetPin_D+0xc>
 148:	22 0f       	add	r18, r18
 14a:	33 1f       	adc	r19, r19
 14c:	8a 95       	dec	r24
 14e:	e2 f7       	brpl	.-8      	; 0x148 <ReSetPin_D+0x8>
 150:	20 95       	com	r18
 152:	29 23       	and	r18, r25
 154:	22 bb       	out	0x12, r18	; 18
 156:	08 95       	ret

00000158 <Dir_C>:
	}
}
void Dir_C(char state,int PinNum)
{
	switch(state)
 158:	88 23       	and	r24, r24
 15a:	19 f0       	breq	.+6      	; 0x162 <Dir_C+0xa>
 15c:	81 30       	cpi	r24, 0x01	; 1
 15e:	69 f0       	breq	.+26     	; 0x17a <Dir_C+0x22>
 160:	17 c0       	rjmp	.+46     	; 0x190 <Dir_C+0x38>
	{
		case in_pin:
		DDRC &= ~(1<<PinNum);
 162:	24 b3       	in	r18, 0x14	; 20
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	02 c0       	rjmp	.+4      	; 0x16e <Dir_C+0x16>
 16a:	88 0f       	add	r24, r24
 16c:	99 1f       	adc	r25, r25
 16e:	6a 95       	dec	r22
 170:	e2 f7       	brpl	.-8      	; 0x16a <Dir_C+0x12>
 172:	80 95       	com	r24
 174:	82 23       	and	r24, r18
 176:	84 bb       	out	0x14, r24	; 20
		break;
 178:	08 95       	ret
		case out_pin:
		DDRC |= 1<<PinNum;
 17a:	24 b3       	in	r18, 0x14	; 20
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	02 c0       	rjmp	.+4      	; 0x186 <Dir_C+0x2e>
 182:	88 0f       	add	r24, r24
 184:	99 1f       	adc	r25, r25
 186:	6a 95       	dec	r22
 188:	e2 f7       	brpl	.-8      	; 0x182 <Dir_C+0x2a>
 18a:	82 2b       	or	r24, r18
 18c:	84 bb       	out	0x14, r24	; 20
		break;
 18e:	08 95       	ret
		default:
		DDRC &= ~(1<<PinNum);
 190:	24 b3       	in	r18, 0x14	; 20
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	02 c0       	rjmp	.+4      	; 0x19c <Dir_C+0x44>
 198:	88 0f       	add	r24, r24
 19a:	99 1f       	adc	r25, r25
 19c:	6a 95       	dec	r22
 19e:	e2 f7       	brpl	.-8      	; 0x198 <Dir_C+0x40>
 1a0:	80 95       	com	r24
 1a2:	82 23       	and	r24, r18
 1a4:	84 bb       	out	0x14, r24	; 20
 1a6:	08 95       	ret

000001a8 <Dir_D>:
	}
}
void Dir_D(char state,int PinNum)
{
	switch(state)
 1a8:	88 23       	and	r24, r24
 1aa:	19 f0       	breq	.+6      	; 0x1b2 <Dir_D+0xa>
 1ac:	81 30       	cpi	r24, 0x01	; 1
 1ae:	69 f0       	breq	.+26     	; 0x1ca <Dir_D+0x22>
 1b0:	17 c0       	rjmp	.+46     	; 0x1e0 <Dir_D+0x38>
	{
		case in_pin:
		DDRD &= ~(1<<PinNum);
 1b2:	21 b3       	in	r18, 0x11	; 17
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <Dir_D+0x16>
 1ba:	88 0f       	add	r24, r24
 1bc:	99 1f       	adc	r25, r25
 1be:	6a 95       	dec	r22
 1c0:	e2 f7       	brpl	.-8      	; 0x1ba <Dir_D+0x12>
 1c2:	80 95       	com	r24
 1c4:	82 23       	and	r24, r18
 1c6:	81 bb       	out	0x11, r24	; 17
		break;
 1c8:	08 95       	ret
		case out_pin:
		DDRD |= 1<<PinNum;
 1ca:	21 b3       	in	r18, 0x11	; 17
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <Dir_D+0x2e>
 1d2:	88 0f       	add	r24, r24
 1d4:	99 1f       	adc	r25, r25
 1d6:	6a 95       	dec	r22
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <Dir_D+0x2a>
 1da:	82 2b       	or	r24, r18
 1dc:	81 bb       	out	0x11, r24	; 17
		break;
 1de:	08 95       	ret
		default:
		DDRD &= ~(1<<PinNum);
 1e0:	21 b3       	in	r18, 0x11	; 17
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <Dir_D+0x44>
 1e8:	88 0f       	add	r24, r24
 1ea:	99 1f       	adc	r25, r25
 1ec:	6a 95       	dec	r22
 1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <Dir_D+0x40>
 1f0:	80 95       	com	r24
 1f2:	82 23       	and	r24, r18
 1f4:	81 bb       	out	0x11, r24	; 17
 1f6:	08 95       	ret

000001f8 <__vector_13>:
#include "TIMER.h"
#include <avr/interrupt.h>
#include <util/delay.h>

ISR(USART_RXC_vect)
{
 1f8:	1f 92       	push	r1
 1fa:	0f 92       	push	r0
 1fc:	0f b6       	in	r0, 0x3f	; 63
 1fe:	0f 92       	push	r0
 200:	11 24       	eor	r1, r1
 202:	2f 93       	push	r18
 204:	3f 93       	push	r19
 206:	4f 93       	push	r20
 208:	5f 93       	push	r21
 20a:	6f 93       	push	r22
 20c:	7f 93       	push	r23
 20e:	8f 93       	push	r24
 210:	9f 93       	push	r25
 212:	af 93       	push	r26
 214:	bf 93       	push	r27
 216:	cf 93       	push	r28
 218:	ef 93       	push	r30
 21a:	ff 93       	push	r31
	char RXData = (char)UDR; // Read received data
 21c:	cc b1       	in	r28, 0x0c	; 12
	SPI_ChangeMode(Master);
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	0e 94 35 02 	call	0x46a	; 0x46a <SPI_ChangeMode>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 226:	8f e3       	ldi	r24, 0x3F	; 63
 228:	9c e9       	ldi	r25, 0x9C	; 156
 22a:	01 97       	sbiw	r24, 0x01	; 1
 22c:	f1 f7       	brne	.-4      	; 0x22a <__vector_13+0x32>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <__vector_13+0x38>
 230:	00 00       	nop
	_delay_ms(10);
	switch (RXData) // Cheek the data received
 232:	8c 2f       	mov	r24, r28
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	fc 01       	movw	r30, r24
 238:	e1 54       	subi	r30, 0x41	; 65
 23a:	f1 09       	sbc	r31, r1
 23c:	e4 32       	cpi	r30, 0x24	; 36
 23e:	f1 05       	cpc	r31, r1
 240:	f8 f4       	brcc	.+62     	; 0x280 <__vector_13+0x88>
 242:	e6 5d       	subi	r30, 0xD6	; 214
 244:	ff 4f       	sbci	r31, 0xFF	; 255
 246:	0c 94 9d 04 	jmp	0x93a	; 0x93a <__tablejump2__>
	{
		case 'A':
		case 'a':
			_Led2(ON);
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <_Led2>
			SPI_Data('A');		//Send data using SPI
 250:	81 e4       	ldi	r24, 0x41	; 65
 252:	0e 94 62 02 	call	0x4c4	; 0x4c4 <SPI_Data>
			break;
 256:	14 c0       	rjmp	.+40     	; 0x280 <__vector_13+0x88>

		case 'B':
		case 'b':
			_Led2(OFF);
 258:	80 e0       	ldi	r24, 0x00	; 0
 25a:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <_Led2>
			SPI_Data('B');		//Send data using SPI
 25e:	82 e4       	ldi	r24, 0x42	; 66
 260:	0e 94 62 02 	call	0x4c4	; 0x4c4 <SPI_Data>
			break;
 264:	0d c0       	rjmp	.+26     	; 0x280 <__vector_13+0x88>

		case 'C':
		case 'c':
			_Led2(ON);
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <_Led2>
			SPI_Data('C'); //Send data using SPI
 26c:	83 e4       	ldi	r24, 0x43	; 67
 26e:	0e 94 62 02 	call	0x4c4	; 0x4c4 <SPI_Data>
			break;
 272:	06 c0       	rjmp	.+12     	; 0x280 <__vector_13+0x88>

		case 'D':
		case 'd':
			_Led2(OFF);
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <_Led2>
			SPI_Data('D');//Send data using SPI
 27a:	84 e4       	ldi	r24, 0x44	; 68
 27c:	0e 94 62 02 	call	0x4c4	; 0x4c4 <SPI_Data>
			break;

		default://Do nothing
			break;
	}
	SPI_ChangeMode(Slave);
 280:	80 e0       	ldi	r24, 0x00	; 0
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	0e 94 35 02 	call	0x46a	; 0x46a <SPI_ChangeMode>
}
 288:	ff 91       	pop	r31
 28a:	ef 91       	pop	r30
 28c:	cf 91       	pop	r28
 28e:	bf 91       	pop	r27
 290:	af 91       	pop	r26
 292:	9f 91       	pop	r25
 294:	8f 91       	pop	r24
 296:	7f 91       	pop	r23
 298:	6f 91       	pop	r22
 29a:	5f 91       	pop	r21
 29c:	4f 91       	pop	r20
 29e:	3f 91       	pop	r19
 2a0:	2f 91       	pop	r18
 2a2:	0f 90       	pop	r0
 2a4:	0f be       	out	0x3f, r0	; 63
 2a6:	0f 90       	pop	r0
 2a8:	1f 90       	pop	r1
 2aa:	18 95       	reti

000002ac <__vector_12>:

ISR(SPI_STC_vect)
{
 2ac:	1f 92       	push	r1
 2ae:	0f 92       	push	r0
 2b0:	0f b6       	in	r0, 0x3f	; 63
 2b2:	0f 92       	push	r0
 2b4:	11 24       	eor	r1, r1
 2b6:	2f 93       	push	r18
 2b8:	3f 93       	push	r19
 2ba:	4f 93       	push	r20
 2bc:	5f 93       	push	r21
 2be:	6f 93       	push	r22
 2c0:	7f 93       	push	r23
 2c2:	8f 93       	push	r24
 2c4:	9f 93       	push	r25
 2c6:	af 93       	push	r26
 2c8:	bf 93       	push	r27
 2ca:	ef 93       	push	r30
 2cc:	ff 93       	push	r31
		char SPIData = SPDR; // Read received data
 2ce:	ef b1       	in	r30, 0x0f	; 15
		switch (SPIData) // Cheek the data received
 2d0:	8e 2f       	mov	r24, r30
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	fc 01       	movw	r30, r24
 2d6:	e1 54       	subi	r30, 0x41	; 65
 2d8:	f1 09       	sbc	r31, r1
 2da:	e4 32       	cpi	r30, 0x24	; 36
 2dc:	f1 05       	cpc	r31, r1
 2de:	98 f4       	brcc	.+38     	; 0x306 <__vector_12+0x5a>
 2e0:	e2 5b       	subi	r30, 0xB2	; 178
 2e2:	ff 4f       	sbci	r31, 0xFF	; 255
 2e4:	0c 94 9d 04 	jmp	0x93a	; 0x93a <__tablejump2__>
		{
			case 'A':
			case 'a':
				_Led0(ON);
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	0e 94 b3 01 	call	0x366	; 0x366 <_Led0>
				break;
 2ee:	0b c0       	rjmp	.+22     	; 0x306 <__vector_12+0x5a>

			case 'B':
			case 'b':
				_Led0(OFF);
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	0e 94 b3 01 	call	0x366	; 0x366 <_Led0>
				break;
 2f6:	07 c0       	rjmp	.+14     	; 0x306 <__vector_12+0x5a>
				
			case 'C':
			case 'c':
				_Led1(ON);
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	0e 94 c6 01 	call	0x38c	; 0x38c <_Led1>
				break;
 2fe:	03 c0       	rjmp	.+6      	; 0x306 <__vector_12+0x5a>

			case 'D':
			case 'd':
				_Led1(OFF);
 300:	80 e0       	ldi	r24, 0x00	; 0
 302:	0e 94 c6 01 	call	0x38c	; 0x38c <_Led1>
				break;
				
			default://Do nothing
			break;
		}
}
 306:	ff 91       	pop	r31
 308:	ef 91       	pop	r30
 30a:	bf 91       	pop	r27
 30c:	af 91       	pop	r26
 30e:	9f 91       	pop	r25
 310:	8f 91       	pop	r24
 312:	7f 91       	pop	r23
 314:	6f 91       	pop	r22
 316:	5f 91       	pop	r21
 318:	4f 91       	pop	r20
 31a:	3f 91       	pop	r19
 31c:	2f 91       	pop	r18
 31e:	0f 90       	pop	r0
 320:	0f be       	out	0x3f, r0	; 63
 322:	0f 90       	pop	r0
 324:	1f 90       	pop	r1
 326:	18 95       	reti

00000328 <main>:

int main(void)
{
    /* Replace with your application code */
			Dir_C(out_pin,LEDC0);  // Set PinC2 output for LED0 in Kit
 328:	62 e0       	ldi	r22, 0x02	; 2
 32a:	70 e0       	ldi	r23, 0x00	; 0
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	0e 94 ac 00 	call	0x158	; 0x158 <Dir_C>
			Dir_C(out_pin,LEDC1);  // Set PinC7 output for LED1 in Kit
 332:	67 e0       	ldi	r22, 0x07	; 7
 334:	70 e0       	ldi	r23, 0x00	; 0
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	0e 94 ac 00 	call	0x158	; 0x158 <Dir_C>
			Dir_D(out_pin,LEDD2);
 33c:	63 e0       	ldi	r22, 0x03	; 3
 33e:	70 e0       	ldi	r23, 0x00	; 0
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <Dir_D>
			
			UART_Init(9600); // initialize UART module with 9600 baud rate
 346:	80 e8       	ldi	r24, 0x80	; 128
 348:	95 e2       	ldi	r25, 0x25	; 37
 34a:	0e 94 8b 02 	call	0x516	; 0x516 <UART_Init>
			
			SPI_Init(Slave,SPI_CLK_Div128);
 34e:	63 e0       	ldi	r22, 0x03	; 3
 350:	70 e0       	ldi	r23, 0x00	; 0
 352:	80 e0       	ldi	r24, 0x00	; 0
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <SPI_Init>
			SPI_Interrupt_Enable();
 35a:	0e 94 66 02 	call	0x4cc	; 0x4cc <SPI_Interrupt_Enable>
			SPI_Enable();
 35e:	0e 94 2d 02 	call	0x45a	; 0x45a <SPI_Enable>
			
			sei();
 362:	78 94       	sei
 364:	ff cf       	rjmp	.-2      	; 0x364 <main+0x3c>

00000366 <_Led0>:
	Dir_C(out_pin,LEDC1);
	Dir_D(out_pin,LEDD2);
}
void _Led0(char state)
{
	switch(state)
 366:	88 23       	and	r24, r24
 368:	39 f0       	breq	.+14     	; 0x378 <_Led0+0x12>
 36a:	81 30       	cpi	r24, 0x01	; 1
 36c:	51 f4       	brne	.+20     	; 0x382 <_Led0+0x1c>
	{
		case ON:
		SetPin_C(LEDC0);
 36e:	82 e0       	ldi	r24, 0x02	; 2
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	0e 94 7e 00 	call	0xfc	; 0xfc <SetPin_C>
		break;
 376:	08 95       	ret
		case OFF:
		ReSetPin_C(LEDC0);
 378:	82 e0       	ldi	r24, 0x02	; 2
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	0e 94 94 00 	call	0x128	; 0x128 <ReSetPin_C>
		break;
 380:	08 95       	ret
		default:
		ReSetPin_C(LEDC0);
 382:	82 e0       	ldi	r24, 0x02	; 2
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	0e 94 94 00 	call	0x128	; 0x128 <ReSetPin_C>
 38a:	08 95       	ret

0000038c <_Led1>:
	}
}
void _Led1(char state)
{
	switch(state)
 38c:	88 23       	and	r24, r24
 38e:	39 f0       	breq	.+14     	; 0x39e <_Led1+0x12>
 390:	81 30       	cpi	r24, 0x01	; 1
 392:	51 f4       	brne	.+20     	; 0x3a8 <_Led1+0x1c>
	{
		case ON:
		SetPin_C(LEDC1);
 394:	87 e0       	ldi	r24, 0x07	; 7
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	0e 94 7e 00 	call	0xfc	; 0xfc <SetPin_C>
		break;
 39c:	08 95       	ret
		case OFF:
		ReSetPin_C(LEDC1);
 39e:	87 e0       	ldi	r24, 0x07	; 7
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	0e 94 94 00 	call	0x128	; 0x128 <ReSetPin_C>
		break;
 3a6:	08 95       	ret
		default:
		ReSetPin_C(LEDC1);
 3a8:	87 e0       	ldi	r24, 0x07	; 7
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	0e 94 94 00 	call	0x128	; 0x128 <ReSetPin_C>
 3b0:	08 95       	ret

000003b2 <_Led2>:
	}
}
void _Led2(char state)
{
	switch(state)
 3b2:	88 23       	and	r24, r24
 3b4:	39 f0       	breq	.+14     	; 0x3c4 <_Led2+0x12>
 3b6:	81 30       	cpi	r24, 0x01	; 1
 3b8:	51 f4       	brne	.+20     	; 0x3ce <_Led2+0x1c>
	{
		case ON:
		SetPin_D(LEDD2);
 3ba:	83 e0       	ldi	r24, 0x03	; 3
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	0e 94 89 00 	call	0x112	; 0x112 <SetPin_D>
		break;
 3c2:	08 95       	ret
		case OFF:
		ReSetPin_D(LEDD2);
 3c4:	83 e0       	ldi	r24, 0x03	; 3
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	0e 94 a0 00 	call	0x140	; 0x140 <ReSetPin_D>
		break;
 3cc:	08 95       	ret
		default:
		ReSetPin_D(LEDD2);
 3ce:	83 e0       	ldi	r24, 0x03	; 3
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	0e 94 a0 00 	call	0x140	; 0x140 <ReSetPin_D>
 3d6:	08 95       	ret

000003d8 <SPI_Init>:
}
char SPI_Read(void)
{
	return SPDR; // Return received data
	
}
 3d8:	9c 01       	movw	r18, r24
 3da:	9d b1       	in	r25, 0x0d	; 13
 3dc:	9c 7f       	andi	r25, 0xFC	; 252
 3de:	9d b9       	out	0x0d, r25	; 13
 3e0:	9e b1       	in	r25, 0x0e	; 14
 3e2:	9e 7f       	andi	r25, 0xFE	; 254
 3e4:	9e b9       	out	0x0e, r25	; 14
 3e6:	64 30       	cpi	r22, 0x04	; 4
 3e8:	71 05       	cpc	r23, r1
 3ea:	24 f4       	brge	.+8      	; 0x3f4 <SPI_Init+0x1c>
 3ec:	8d b1       	in	r24, 0x0d	; 13
 3ee:	68 2b       	or	r22, r24
 3f0:	6d b9       	out	0x0d, r22	; 13
 3f2:	0d c0       	rjmp	.+26     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 3f4:	8d b1       	in	r24, 0x0d	; 13
 3f6:	96 2f       	mov	r25, r22
 3f8:	93 70       	andi	r25, 0x03	; 3
 3fa:	89 2b       	or	r24, r25
 3fc:	8d b9       	out	0x0d, r24	; 13
 3fe:	8e b1       	in	r24, 0x0e	; 14
 400:	75 95       	asr	r23
 402:	67 95       	ror	r22
 404:	75 95       	asr	r23
 406:	67 95       	ror	r22
 408:	61 70       	andi	r22, 0x01	; 1
 40a:	68 2b       	or	r22, r24
 40c:	6e b9       	out	0x0e, r22	; 14
 40e:	21 15       	cp	r18, r1
 410:	31 05       	cpc	r19, r1
 412:	99 f0       	breq	.+38     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 414:	21 30       	cpi	r18, 0x01	; 1
 416:	31 05       	cpc	r19, r1
 418:	f9 f4       	brne	.+62     	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 41a:	8d b1       	in	r24, 0x0d	; 13
 41c:	80 61       	ori	r24, 0x10	; 16
 41e:	8d b9       	out	0x0d, r24	; 13
 420:	87 b3       	in	r24, 0x17	; 23
 422:	80 62       	ori	r24, 0x20	; 32
 424:	87 bb       	out	0x17, r24	; 23
 426:	87 b3       	in	r24, 0x17	; 23
 428:	8f 7b       	andi	r24, 0xBF	; 191
 42a:	87 bb       	out	0x17, r24	; 23
 42c:	87 b3       	in	r24, 0x17	; 23
 42e:	80 61       	ori	r24, 0x10	; 16
 430:	87 bb       	out	0x17, r24	; 23
 432:	87 b3       	in	r24, 0x17	; 23
 434:	80 68       	ori	r24, 0x80	; 128
 436:	87 bb       	out	0x17, r24	; 23
 438:	08 95       	ret
 43a:	8d b1       	in	r24, 0x0d	; 13
 43c:	8f 7e       	andi	r24, 0xEF	; 239
 43e:	8d b9       	out	0x0d, r24	; 13
 440:	87 b3       	in	r24, 0x17	; 23
 442:	8f 7d       	andi	r24, 0xDF	; 223
 444:	87 bb       	out	0x17, r24	; 23
 446:	87 b3       	in	r24, 0x17	; 23
 448:	80 64       	ori	r24, 0x40	; 64
 44a:	87 bb       	out	0x17, r24	; 23
 44c:	87 b3       	in	r24, 0x17	; 23
 44e:	8f 7e       	andi	r24, 0xEF	; 239
 450:	87 bb       	out	0x17, r24	; 23
 452:	87 b3       	in	r24, 0x17	; 23
 454:	8f 77       	andi	r24, 0x7F	; 127
 456:	87 bb       	out	0x17, r24	; 23
 458:	08 95       	ret

0000045a <SPI_Enable>:
 45a:	8d b1       	in	r24, 0x0d	; 13
 45c:	80 64       	ori	r24, 0x40	; 64
 45e:	8d b9       	out	0x0d, r24	; 13
 460:	08 95       	ret

00000462 <SPI_Disable>:
 462:	8d b1       	in	r24, 0x0d	; 13
 464:	8f 7b       	andi	r24, 0xBF	; 191
 466:	8d b9       	out	0x0d, r24	; 13
 468:	08 95       	ret

0000046a <SPI_ChangeMode>:
 46a:	cf 93       	push	r28
 46c:	df 93       	push	r29
 46e:	ec 01       	movw	r28, r24
 470:	0e 94 31 02 	call	0x462	; 0x462 <SPI_Disable>
 474:	20 97       	sbiw	r28, 0x00	; 0
 476:	91 f0       	breq	.+36     	; 0x49c <SPI_ChangeMode+0x32>
 478:	21 97       	sbiw	r28, 0x01	; 1
 47a:	f9 f4       	brne	.+62     	; 0x4ba <SPI_ChangeMode+0x50>
 47c:	8d b1       	in	r24, 0x0d	; 13
 47e:	80 61       	ori	r24, 0x10	; 16
 480:	8d b9       	out	0x0d, r24	; 13
 482:	87 b3       	in	r24, 0x17	; 23
 484:	80 62       	ori	r24, 0x20	; 32
 486:	87 bb       	out	0x17, r24	; 23
 488:	87 b3       	in	r24, 0x17	; 23
 48a:	8f 7b       	andi	r24, 0xBF	; 191
 48c:	87 bb       	out	0x17, r24	; 23
 48e:	87 b3       	in	r24, 0x17	; 23
 490:	80 61       	ori	r24, 0x10	; 16
 492:	87 bb       	out	0x17, r24	; 23
 494:	87 b3       	in	r24, 0x17	; 23
 496:	80 68       	ori	r24, 0x80	; 128
 498:	87 bb       	out	0x17, r24	; 23
 49a:	0f c0       	rjmp	.+30     	; 0x4ba <SPI_ChangeMode+0x50>
 49c:	8d b1       	in	r24, 0x0d	; 13
 49e:	8f 7e       	andi	r24, 0xEF	; 239
 4a0:	8d b9       	out	0x0d, r24	; 13
 4a2:	87 b3       	in	r24, 0x17	; 23
 4a4:	8f 7d       	andi	r24, 0xDF	; 223
 4a6:	87 bb       	out	0x17, r24	; 23
 4a8:	87 b3       	in	r24, 0x17	; 23
 4aa:	80 64       	ori	r24, 0x40	; 64
 4ac:	87 bb       	out	0x17, r24	; 23
 4ae:	87 b3       	in	r24, 0x17	; 23
 4b0:	8f 7e       	andi	r24, 0xEF	; 239
 4b2:	87 bb       	out	0x17, r24	; 23
 4b4:	87 b3       	in	r24, 0x17	; 23
 4b6:	8f 77       	andi	r24, 0x7F	; 127
 4b8:	87 bb       	out	0x17, r24	; 23
 4ba:	0e 94 2d 02 	call	0x45a	; 0x45a <SPI_Enable>
 4be:	df 91       	pop	r29
 4c0:	cf 91       	pop	r28
 4c2:	08 95       	ret

000004c4 <SPI_Data>:
void SPI_Data(char data)
{
	SPDR = data; // Put The data in Data register to send it
 4c4:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1 << SPIF))); // wait until all data out
 4c6:	77 9b       	sbis	0x0e, 7	; 14
 4c8:	fe cf       	rjmp	.-4      	; 0x4c6 <SPI_Data+0x2>
	//SPSR  & = 1 << SPIF;
	//PORTD = 0;
	
}
 4ca:	08 95       	ret

000004cc <SPI_Interrupt_Enable>:
void SPI_Interrupt_Enable(void)
{
	SPCR |= (1 << SPIE); //Enable interrupts for SPI
 4cc:	8d b1       	in	r24, 0x0d	; 13
 4ce:	80 68       	ori	r24, 0x80	; 128
 4d0:	8d b9       	out	0x0d, r24	; 13
 4d2:	08 95       	ret

000004d4 <UART_BaudRate>:
	
		
}
void UART_BaudRate(unsigned int rate)
{
	unsigned int BR = (F_CPU/(16.0 * rate))-1; // calculate  the value to config the baud rate 
 4d4:	bc 01       	movw	r22, r24
 4d6:	80 e0       	ldi	r24, 0x00	; 0
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	0e 94 a2 03 	call	0x744	; 0x744 <__floatunsisf>
 4de:	20 e0       	ldi	r18, 0x00	; 0
 4e0:	30 e0       	ldi	r19, 0x00	; 0
 4e2:	40 e8       	ldi	r20, 0x80	; 128
 4e4:	51 e4       	ldi	r21, 0x41	; 65
 4e6:	0e 94 30 04 	call	0x860	; 0x860 <__mulsf3>
 4ea:	9b 01       	movw	r18, r22
 4ec:	ac 01       	movw	r20, r24
 4ee:	60 e0       	ldi	r22, 0x00	; 0
 4f0:	74 e2       	ldi	r23, 0x24	; 36
 4f2:	84 e7       	ldi	r24, 0x74	; 116
 4f4:	9b e4       	ldi	r25, 0x4B	; 75
 4f6:	0e 94 01 03 	call	0x602	; 0x602 <__divsf3>
 4fa:	20 e0       	ldi	r18, 0x00	; 0
 4fc:	30 e0       	ldi	r19, 0x00	; 0
 4fe:	40 e8       	ldi	r20, 0x80	; 128
 500:	5f e3       	ldi	r21, 0x3F	; 63
 502:	0e 94 94 02 	call	0x528	; 0x528 <__subsf3>
 506:	0e 94 73 03 	call	0x6e6	; 0x6e6 <__fixunssfsi>
	UBRRL = (char)BR;  // put the lower 8 bits for baud rate
 50a:	69 b9       	out	0x09, r22	; 9
	UBRRH &= ~(1 << URSEL); // Clear this bit to write the baud rate in this register
 50c:	80 b5       	in	r24, 0x20	; 32
 50e:	8f 77       	andi	r24, 0x7F	; 127
 510:	80 bd       	out	0x20, r24	; 32
	UBRRH = (BR >> 8); // put the highest 4 bits for baud rate 
 512:	70 bd       	out	0x20, r23	; 32
 514:	08 95       	ret

00000516 <UART_Init>:
	*/
	
	//UCSRC = 0b11000110; //for synchronus*
	
		
	UART_BaudRate(BR);	// Call function to config baud rate
 516:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <UART_BaudRate>
	UCSRB |= (1<<TXEN) | (1<<RXEN); // Enable Transmitter and receiver
 51a:	8a b1       	in	r24, 0x0a	; 10
 51c:	88 61       	ori	r24, 0x18	; 24
 51e:	8a b9       	out	0x0a, r24	; 10
	UCSRB |= 1<<RXCIE; /// Optional // Enable interrupt when receiving data
 520:	8a b1       	in	r24, 0x0a	; 10
 522:	80 68       	ori	r24, 0x80	; 128
 524:	8a b9       	out	0x0a, r24	; 10
 526:	08 95       	ret

00000528 <__subsf3>:
 528:	50 58       	subi	r21, 0x80	; 128

0000052a <__addsf3>:
 52a:	bb 27       	eor	r27, r27
 52c:	aa 27       	eor	r26, r26
 52e:	0e 94 ac 02 	call	0x558	; 0x558 <__addsf3x>
 532:	0c 94 f6 03 	jmp	0x7ec	; 0x7ec <__fp_round>
 536:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <__fp_pscA>
 53a:	38 f0       	brcs	.+14     	; 0x54a <__addsf3+0x20>
 53c:	0e 94 ef 03 	call	0x7de	; 0x7de <__fp_pscB>
 540:	20 f0       	brcs	.+8      	; 0x54a <__addsf3+0x20>
 542:	39 f4       	brne	.+14     	; 0x552 <__addsf3+0x28>
 544:	9f 3f       	cpi	r25, 0xFF	; 255
 546:	19 f4       	brne	.+6      	; 0x54e <__addsf3+0x24>
 548:	26 f4       	brtc	.+8      	; 0x552 <__addsf3+0x28>
 54a:	0c 94 e5 03 	jmp	0x7ca	; 0x7ca <__fp_nan>
 54e:	0e f4       	brtc	.+2      	; 0x552 <__addsf3+0x28>
 550:	e0 95       	com	r30
 552:	e7 fb       	bst	r30, 7
 554:	0c 94 df 03 	jmp	0x7be	; 0x7be <__fp_inf>

00000558 <__addsf3x>:
 558:	e9 2f       	mov	r30, r25
 55a:	0e 94 07 04 	call	0x80e	; 0x80e <__fp_split3>
 55e:	58 f3       	brcs	.-42     	; 0x536 <__addsf3+0xc>
 560:	ba 17       	cp	r27, r26
 562:	62 07       	cpc	r22, r18
 564:	73 07       	cpc	r23, r19
 566:	84 07       	cpc	r24, r20
 568:	95 07       	cpc	r25, r21
 56a:	20 f0       	brcs	.+8      	; 0x574 <__addsf3x+0x1c>
 56c:	79 f4       	brne	.+30     	; 0x58c <__addsf3x+0x34>
 56e:	a6 f5       	brtc	.+104    	; 0x5d8 <__addsf3x+0x80>
 570:	0c 94 29 04 	jmp	0x852	; 0x852 <__fp_zero>
 574:	0e f4       	brtc	.+2      	; 0x578 <__addsf3x+0x20>
 576:	e0 95       	com	r30
 578:	0b 2e       	mov	r0, r27
 57a:	ba 2f       	mov	r27, r26
 57c:	a0 2d       	mov	r26, r0
 57e:	0b 01       	movw	r0, r22
 580:	b9 01       	movw	r22, r18
 582:	90 01       	movw	r18, r0
 584:	0c 01       	movw	r0, r24
 586:	ca 01       	movw	r24, r20
 588:	a0 01       	movw	r20, r0
 58a:	11 24       	eor	r1, r1
 58c:	ff 27       	eor	r31, r31
 58e:	59 1b       	sub	r21, r25
 590:	99 f0       	breq	.+38     	; 0x5b8 <__addsf3x+0x60>
 592:	59 3f       	cpi	r21, 0xF9	; 249
 594:	50 f4       	brcc	.+20     	; 0x5aa <__addsf3x+0x52>
 596:	50 3e       	cpi	r21, 0xE0	; 224
 598:	68 f1       	brcs	.+90     	; 0x5f4 <__addsf3x+0x9c>
 59a:	1a 16       	cp	r1, r26
 59c:	f0 40       	sbci	r31, 0x00	; 0
 59e:	a2 2f       	mov	r26, r18
 5a0:	23 2f       	mov	r18, r19
 5a2:	34 2f       	mov	r19, r20
 5a4:	44 27       	eor	r20, r20
 5a6:	58 5f       	subi	r21, 0xF8	; 248
 5a8:	f3 cf       	rjmp	.-26     	; 0x590 <__addsf3x+0x38>
 5aa:	46 95       	lsr	r20
 5ac:	37 95       	ror	r19
 5ae:	27 95       	ror	r18
 5b0:	a7 95       	ror	r26
 5b2:	f0 40       	sbci	r31, 0x00	; 0
 5b4:	53 95       	inc	r21
 5b6:	c9 f7       	brne	.-14     	; 0x5aa <__addsf3x+0x52>
 5b8:	7e f4       	brtc	.+30     	; 0x5d8 <__addsf3x+0x80>
 5ba:	1f 16       	cp	r1, r31
 5bc:	ba 0b       	sbc	r27, r26
 5be:	62 0b       	sbc	r22, r18
 5c0:	73 0b       	sbc	r23, r19
 5c2:	84 0b       	sbc	r24, r20
 5c4:	ba f0       	brmi	.+46     	; 0x5f4 <__addsf3x+0x9c>
 5c6:	91 50       	subi	r25, 0x01	; 1
 5c8:	a1 f0       	breq	.+40     	; 0x5f2 <__addsf3x+0x9a>
 5ca:	ff 0f       	add	r31, r31
 5cc:	bb 1f       	adc	r27, r27
 5ce:	66 1f       	adc	r22, r22
 5d0:	77 1f       	adc	r23, r23
 5d2:	88 1f       	adc	r24, r24
 5d4:	c2 f7       	brpl	.-16     	; 0x5c6 <__addsf3x+0x6e>
 5d6:	0e c0       	rjmp	.+28     	; 0x5f4 <__addsf3x+0x9c>
 5d8:	ba 0f       	add	r27, r26
 5da:	62 1f       	adc	r22, r18
 5dc:	73 1f       	adc	r23, r19
 5de:	84 1f       	adc	r24, r20
 5e0:	48 f4       	brcc	.+18     	; 0x5f4 <__addsf3x+0x9c>
 5e2:	87 95       	ror	r24
 5e4:	77 95       	ror	r23
 5e6:	67 95       	ror	r22
 5e8:	b7 95       	ror	r27
 5ea:	f7 95       	ror	r31
 5ec:	9e 3f       	cpi	r25, 0xFE	; 254
 5ee:	08 f0       	brcs	.+2      	; 0x5f2 <__addsf3x+0x9a>
 5f0:	b0 cf       	rjmp	.-160    	; 0x552 <__addsf3+0x28>
 5f2:	93 95       	inc	r25
 5f4:	88 0f       	add	r24, r24
 5f6:	08 f0       	brcs	.+2      	; 0x5fa <__addsf3x+0xa2>
 5f8:	99 27       	eor	r25, r25
 5fa:	ee 0f       	add	r30, r30
 5fc:	97 95       	ror	r25
 5fe:	87 95       	ror	r24
 600:	08 95       	ret

00000602 <__divsf3>:
 602:	0e 94 15 03 	call	0x62a	; 0x62a <__divsf3x>
 606:	0c 94 f6 03 	jmp	0x7ec	; 0x7ec <__fp_round>
 60a:	0e 94 ef 03 	call	0x7de	; 0x7de <__fp_pscB>
 60e:	58 f0       	brcs	.+22     	; 0x626 <__divsf3+0x24>
 610:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <__fp_pscA>
 614:	40 f0       	brcs	.+16     	; 0x626 <__divsf3+0x24>
 616:	29 f4       	brne	.+10     	; 0x622 <__divsf3+0x20>
 618:	5f 3f       	cpi	r21, 0xFF	; 255
 61a:	29 f0       	breq	.+10     	; 0x626 <__divsf3+0x24>
 61c:	0c 94 df 03 	jmp	0x7be	; 0x7be <__fp_inf>
 620:	51 11       	cpse	r21, r1
 622:	0c 94 2a 04 	jmp	0x854	; 0x854 <__fp_szero>
 626:	0c 94 e5 03 	jmp	0x7ca	; 0x7ca <__fp_nan>

0000062a <__divsf3x>:
 62a:	0e 94 07 04 	call	0x80e	; 0x80e <__fp_split3>
 62e:	68 f3       	brcs	.-38     	; 0x60a <__divsf3+0x8>

00000630 <__divsf3_pse>:
 630:	99 23       	and	r25, r25
 632:	b1 f3       	breq	.-20     	; 0x620 <__divsf3+0x1e>
 634:	55 23       	and	r21, r21
 636:	91 f3       	breq	.-28     	; 0x61c <__divsf3+0x1a>
 638:	95 1b       	sub	r25, r21
 63a:	55 0b       	sbc	r21, r21
 63c:	bb 27       	eor	r27, r27
 63e:	aa 27       	eor	r26, r26
 640:	62 17       	cp	r22, r18
 642:	73 07       	cpc	r23, r19
 644:	84 07       	cpc	r24, r20
 646:	38 f0       	brcs	.+14     	; 0x656 <__divsf3_pse+0x26>
 648:	9f 5f       	subi	r25, 0xFF	; 255
 64a:	5f 4f       	sbci	r21, 0xFF	; 255
 64c:	22 0f       	add	r18, r18
 64e:	33 1f       	adc	r19, r19
 650:	44 1f       	adc	r20, r20
 652:	aa 1f       	adc	r26, r26
 654:	a9 f3       	breq	.-22     	; 0x640 <__divsf3_pse+0x10>
 656:	35 d0       	rcall	.+106    	; 0x6c2 <__divsf3_pse+0x92>
 658:	0e 2e       	mov	r0, r30
 65a:	3a f0       	brmi	.+14     	; 0x66a <__divsf3_pse+0x3a>
 65c:	e0 e8       	ldi	r30, 0x80	; 128
 65e:	32 d0       	rcall	.+100    	; 0x6c4 <__divsf3_pse+0x94>
 660:	91 50       	subi	r25, 0x01	; 1
 662:	50 40       	sbci	r21, 0x00	; 0
 664:	e6 95       	lsr	r30
 666:	00 1c       	adc	r0, r0
 668:	ca f7       	brpl	.-14     	; 0x65c <__divsf3_pse+0x2c>
 66a:	2b d0       	rcall	.+86     	; 0x6c2 <__divsf3_pse+0x92>
 66c:	fe 2f       	mov	r31, r30
 66e:	29 d0       	rcall	.+82     	; 0x6c2 <__divsf3_pse+0x92>
 670:	66 0f       	add	r22, r22
 672:	77 1f       	adc	r23, r23
 674:	88 1f       	adc	r24, r24
 676:	bb 1f       	adc	r27, r27
 678:	26 17       	cp	r18, r22
 67a:	37 07       	cpc	r19, r23
 67c:	48 07       	cpc	r20, r24
 67e:	ab 07       	cpc	r26, r27
 680:	b0 e8       	ldi	r27, 0x80	; 128
 682:	09 f0       	breq	.+2      	; 0x686 <__divsf3_pse+0x56>
 684:	bb 0b       	sbc	r27, r27
 686:	80 2d       	mov	r24, r0
 688:	bf 01       	movw	r22, r30
 68a:	ff 27       	eor	r31, r31
 68c:	93 58       	subi	r25, 0x83	; 131
 68e:	5f 4f       	sbci	r21, 0xFF	; 255
 690:	3a f0       	brmi	.+14     	; 0x6a0 <__divsf3_pse+0x70>
 692:	9e 3f       	cpi	r25, 0xFE	; 254
 694:	51 05       	cpc	r21, r1
 696:	78 f0       	brcs	.+30     	; 0x6b6 <__divsf3_pse+0x86>
 698:	0c 94 df 03 	jmp	0x7be	; 0x7be <__fp_inf>
 69c:	0c 94 2a 04 	jmp	0x854	; 0x854 <__fp_szero>
 6a0:	5f 3f       	cpi	r21, 0xFF	; 255
 6a2:	e4 f3       	brlt	.-8      	; 0x69c <__divsf3_pse+0x6c>
 6a4:	98 3e       	cpi	r25, 0xE8	; 232
 6a6:	d4 f3       	brlt	.-12     	; 0x69c <__divsf3_pse+0x6c>
 6a8:	86 95       	lsr	r24
 6aa:	77 95       	ror	r23
 6ac:	67 95       	ror	r22
 6ae:	b7 95       	ror	r27
 6b0:	f7 95       	ror	r31
 6b2:	9f 5f       	subi	r25, 0xFF	; 255
 6b4:	c9 f7       	brne	.-14     	; 0x6a8 <__divsf3_pse+0x78>
 6b6:	88 0f       	add	r24, r24
 6b8:	91 1d       	adc	r25, r1
 6ba:	96 95       	lsr	r25
 6bc:	87 95       	ror	r24
 6be:	97 f9       	bld	r25, 7
 6c0:	08 95       	ret
 6c2:	e1 e0       	ldi	r30, 0x01	; 1
 6c4:	66 0f       	add	r22, r22
 6c6:	77 1f       	adc	r23, r23
 6c8:	88 1f       	adc	r24, r24
 6ca:	bb 1f       	adc	r27, r27
 6cc:	62 17       	cp	r22, r18
 6ce:	73 07       	cpc	r23, r19
 6d0:	84 07       	cpc	r24, r20
 6d2:	ba 07       	cpc	r27, r26
 6d4:	20 f0       	brcs	.+8      	; 0x6de <__divsf3_pse+0xae>
 6d6:	62 1b       	sub	r22, r18
 6d8:	73 0b       	sbc	r23, r19
 6da:	84 0b       	sbc	r24, r20
 6dc:	ba 0b       	sbc	r27, r26
 6de:	ee 1f       	adc	r30, r30
 6e0:	88 f7       	brcc	.-30     	; 0x6c4 <__divsf3_pse+0x94>
 6e2:	e0 95       	com	r30
 6e4:	08 95       	ret

000006e6 <__fixunssfsi>:
 6e6:	0e 94 0f 04 	call	0x81e	; 0x81e <__fp_splitA>
 6ea:	88 f0       	brcs	.+34     	; 0x70e <__fixunssfsi+0x28>
 6ec:	9f 57       	subi	r25, 0x7F	; 127
 6ee:	98 f0       	brcs	.+38     	; 0x716 <__fixunssfsi+0x30>
 6f0:	b9 2f       	mov	r27, r25
 6f2:	99 27       	eor	r25, r25
 6f4:	b7 51       	subi	r27, 0x17	; 23
 6f6:	b0 f0       	brcs	.+44     	; 0x724 <__fixunssfsi+0x3e>
 6f8:	e1 f0       	breq	.+56     	; 0x732 <__fixunssfsi+0x4c>
 6fa:	66 0f       	add	r22, r22
 6fc:	77 1f       	adc	r23, r23
 6fe:	88 1f       	adc	r24, r24
 700:	99 1f       	adc	r25, r25
 702:	1a f0       	brmi	.+6      	; 0x70a <__fixunssfsi+0x24>
 704:	ba 95       	dec	r27
 706:	c9 f7       	brne	.-14     	; 0x6fa <__fixunssfsi+0x14>
 708:	14 c0       	rjmp	.+40     	; 0x732 <__fixunssfsi+0x4c>
 70a:	b1 30       	cpi	r27, 0x01	; 1
 70c:	91 f0       	breq	.+36     	; 0x732 <__fixunssfsi+0x4c>
 70e:	0e 94 29 04 	call	0x852	; 0x852 <__fp_zero>
 712:	b1 e0       	ldi	r27, 0x01	; 1
 714:	08 95       	ret
 716:	0c 94 29 04 	jmp	0x852	; 0x852 <__fp_zero>
 71a:	67 2f       	mov	r22, r23
 71c:	78 2f       	mov	r23, r24
 71e:	88 27       	eor	r24, r24
 720:	b8 5f       	subi	r27, 0xF8	; 248
 722:	39 f0       	breq	.+14     	; 0x732 <__fixunssfsi+0x4c>
 724:	b9 3f       	cpi	r27, 0xF9	; 249
 726:	cc f3       	brlt	.-14     	; 0x71a <__fixunssfsi+0x34>
 728:	86 95       	lsr	r24
 72a:	77 95       	ror	r23
 72c:	67 95       	ror	r22
 72e:	b3 95       	inc	r27
 730:	d9 f7       	brne	.-10     	; 0x728 <__fixunssfsi+0x42>
 732:	3e f4       	brtc	.+14     	; 0x742 <__fixunssfsi+0x5c>
 734:	90 95       	com	r25
 736:	80 95       	com	r24
 738:	70 95       	com	r23
 73a:	61 95       	neg	r22
 73c:	7f 4f       	sbci	r23, 0xFF	; 255
 73e:	8f 4f       	sbci	r24, 0xFF	; 255
 740:	9f 4f       	sbci	r25, 0xFF	; 255
 742:	08 95       	ret

00000744 <__floatunsisf>:
 744:	e8 94       	clt
 746:	09 c0       	rjmp	.+18     	; 0x75a <__floatsisf+0x12>

00000748 <__floatsisf>:
 748:	97 fb       	bst	r25, 7
 74a:	3e f4       	brtc	.+14     	; 0x75a <__floatsisf+0x12>
 74c:	90 95       	com	r25
 74e:	80 95       	com	r24
 750:	70 95       	com	r23
 752:	61 95       	neg	r22
 754:	7f 4f       	sbci	r23, 0xFF	; 255
 756:	8f 4f       	sbci	r24, 0xFF	; 255
 758:	9f 4f       	sbci	r25, 0xFF	; 255
 75a:	99 23       	and	r25, r25
 75c:	a9 f0       	breq	.+42     	; 0x788 <__floatsisf+0x40>
 75e:	f9 2f       	mov	r31, r25
 760:	96 e9       	ldi	r25, 0x96	; 150
 762:	bb 27       	eor	r27, r27
 764:	93 95       	inc	r25
 766:	f6 95       	lsr	r31
 768:	87 95       	ror	r24
 76a:	77 95       	ror	r23
 76c:	67 95       	ror	r22
 76e:	b7 95       	ror	r27
 770:	f1 11       	cpse	r31, r1
 772:	f8 cf       	rjmp	.-16     	; 0x764 <__floatsisf+0x1c>
 774:	fa f4       	brpl	.+62     	; 0x7b4 <__floatsisf+0x6c>
 776:	bb 0f       	add	r27, r27
 778:	11 f4       	brne	.+4      	; 0x77e <__floatsisf+0x36>
 77a:	60 ff       	sbrs	r22, 0
 77c:	1b c0       	rjmp	.+54     	; 0x7b4 <__floatsisf+0x6c>
 77e:	6f 5f       	subi	r22, 0xFF	; 255
 780:	7f 4f       	sbci	r23, 0xFF	; 255
 782:	8f 4f       	sbci	r24, 0xFF	; 255
 784:	9f 4f       	sbci	r25, 0xFF	; 255
 786:	16 c0       	rjmp	.+44     	; 0x7b4 <__floatsisf+0x6c>
 788:	88 23       	and	r24, r24
 78a:	11 f0       	breq	.+4      	; 0x790 <__floatsisf+0x48>
 78c:	96 e9       	ldi	r25, 0x96	; 150
 78e:	11 c0       	rjmp	.+34     	; 0x7b2 <__floatsisf+0x6a>
 790:	77 23       	and	r23, r23
 792:	21 f0       	breq	.+8      	; 0x79c <__floatsisf+0x54>
 794:	9e e8       	ldi	r25, 0x8E	; 142
 796:	87 2f       	mov	r24, r23
 798:	76 2f       	mov	r23, r22
 79a:	05 c0       	rjmp	.+10     	; 0x7a6 <__floatsisf+0x5e>
 79c:	66 23       	and	r22, r22
 79e:	71 f0       	breq	.+28     	; 0x7bc <__floatsisf+0x74>
 7a0:	96 e8       	ldi	r25, 0x86	; 134
 7a2:	86 2f       	mov	r24, r22
 7a4:	70 e0       	ldi	r23, 0x00	; 0
 7a6:	60 e0       	ldi	r22, 0x00	; 0
 7a8:	2a f0       	brmi	.+10     	; 0x7b4 <__floatsisf+0x6c>
 7aa:	9a 95       	dec	r25
 7ac:	66 0f       	add	r22, r22
 7ae:	77 1f       	adc	r23, r23
 7b0:	88 1f       	adc	r24, r24
 7b2:	da f7       	brpl	.-10     	; 0x7aa <__floatsisf+0x62>
 7b4:	88 0f       	add	r24, r24
 7b6:	96 95       	lsr	r25
 7b8:	87 95       	ror	r24
 7ba:	97 f9       	bld	r25, 7
 7bc:	08 95       	ret

000007be <__fp_inf>:
 7be:	97 f9       	bld	r25, 7
 7c0:	9f 67       	ori	r25, 0x7F	; 127
 7c2:	80 e8       	ldi	r24, 0x80	; 128
 7c4:	70 e0       	ldi	r23, 0x00	; 0
 7c6:	60 e0       	ldi	r22, 0x00	; 0
 7c8:	08 95       	ret

000007ca <__fp_nan>:
 7ca:	9f ef       	ldi	r25, 0xFF	; 255
 7cc:	80 ec       	ldi	r24, 0xC0	; 192
 7ce:	08 95       	ret

000007d0 <__fp_pscA>:
 7d0:	00 24       	eor	r0, r0
 7d2:	0a 94       	dec	r0
 7d4:	16 16       	cp	r1, r22
 7d6:	17 06       	cpc	r1, r23
 7d8:	18 06       	cpc	r1, r24
 7da:	09 06       	cpc	r0, r25
 7dc:	08 95       	ret

000007de <__fp_pscB>:
 7de:	00 24       	eor	r0, r0
 7e0:	0a 94       	dec	r0
 7e2:	12 16       	cp	r1, r18
 7e4:	13 06       	cpc	r1, r19
 7e6:	14 06       	cpc	r1, r20
 7e8:	05 06       	cpc	r0, r21
 7ea:	08 95       	ret

000007ec <__fp_round>:
 7ec:	09 2e       	mov	r0, r25
 7ee:	03 94       	inc	r0
 7f0:	00 0c       	add	r0, r0
 7f2:	11 f4       	brne	.+4      	; 0x7f8 <__fp_round+0xc>
 7f4:	88 23       	and	r24, r24
 7f6:	52 f0       	brmi	.+20     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 7f8:	bb 0f       	add	r27, r27
 7fa:	40 f4       	brcc	.+16     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 7fc:	bf 2b       	or	r27, r31
 7fe:	11 f4       	brne	.+4      	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 800:	60 ff       	sbrs	r22, 0
 802:	04 c0       	rjmp	.+8      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 804:	6f 5f       	subi	r22, 0xFF	; 255
 806:	7f 4f       	sbci	r23, 0xFF	; 255
 808:	8f 4f       	sbci	r24, 0xFF	; 255
 80a:	9f 4f       	sbci	r25, 0xFF	; 255
 80c:	08 95       	ret

0000080e <__fp_split3>:
 80e:	57 fd       	sbrc	r21, 7
 810:	90 58       	subi	r25, 0x80	; 128
 812:	44 0f       	add	r20, r20
 814:	55 1f       	adc	r21, r21
 816:	59 f0       	breq	.+22     	; 0x82e <__fp_splitA+0x10>
 818:	5f 3f       	cpi	r21, 0xFF	; 255
 81a:	71 f0       	breq	.+28     	; 0x838 <__fp_splitA+0x1a>
 81c:	47 95       	ror	r20

0000081e <__fp_splitA>:
 81e:	88 0f       	add	r24, r24
 820:	97 fb       	bst	r25, 7
 822:	99 1f       	adc	r25, r25
 824:	61 f0       	breq	.+24     	; 0x83e <__fp_splitA+0x20>
 826:	9f 3f       	cpi	r25, 0xFF	; 255
 828:	79 f0       	breq	.+30     	; 0x848 <__fp_splitA+0x2a>
 82a:	87 95       	ror	r24
 82c:	08 95       	ret
 82e:	12 16       	cp	r1, r18
 830:	13 06       	cpc	r1, r19
 832:	14 06       	cpc	r1, r20
 834:	55 1f       	adc	r21, r21
 836:	f2 cf       	rjmp	.-28     	; 0x81c <__fp_split3+0xe>
 838:	46 95       	lsr	r20
 83a:	f1 df       	rcall	.-30     	; 0x81e <__fp_splitA>
 83c:	08 c0       	rjmp	.+16     	; 0x84e <__fp_splitA+0x30>
 83e:	16 16       	cp	r1, r22
 840:	17 06       	cpc	r1, r23
 842:	18 06       	cpc	r1, r24
 844:	99 1f       	adc	r25, r25
 846:	f1 cf       	rjmp	.-30     	; 0x82a <__fp_splitA+0xc>
 848:	86 95       	lsr	r24
 84a:	71 05       	cpc	r23, r1
 84c:	61 05       	cpc	r22, r1
 84e:	08 94       	sec
 850:	08 95       	ret

00000852 <__fp_zero>:
 852:	e8 94       	clt

00000854 <__fp_szero>:
 854:	bb 27       	eor	r27, r27
 856:	66 27       	eor	r22, r22
 858:	77 27       	eor	r23, r23
 85a:	cb 01       	movw	r24, r22
 85c:	97 f9       	bld	r25, 7
 85e:	08 95       	ret

00000860 <__mulsf3>:
 860:	0e 94 43 04 	call	0x886	; 0x886 <__mulsf3x>
 864:	0c 94 f6 03 	jmp	0x7ec	; 0x7ec <__fp_round>
 868:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <__fp_pscA>
 86c:	38 f0       	brcs	.+14     	; 0x87c <__mulsf3+0x1c>
 86e:	0e 94 ef 03 	call	0x7de	; 0x7de <__fp_pscB>
 872:	20 f0       	brcs	.+8      	; 0x87c <__mulsf3+0x1c>
 874:	95 23       	and	r25, r21
 876:	11 f0       	breq	.+4      	; 0x87c <__mulsf3+0x1c>
 878:	0c 94 df 03 	jmp	0x7be	; 0x7be <__fp_inf>
 87c:	0c 94 e5 03 	jmp	0x7ca	; 0x7ca <__fp_nan>
 880:	11 24       	eor	r1, r1
 882:	0c 94 2a 04 	jmp	0x854	; 0x854 <__fp_szero>

00000886 <__mulsf3x>:
 886:	0e 94 07 04 	call	0x80e	; 0x80e <__fp_split3>
 88a:	70 f3       	brcs	.-36     	; 0x868 <__mulsf3+0x8>

0000088c <__mulsf3_pse>:
 88c:	95 9f       	mul	r25, r21
 88e:	c1 f3       	breq	.-16     	; 0x880 <__mulsf3+0x20>
 890:	95 0f       	add	r25, r21
 892:	50 e0       	ldi	r21, 0x00	; 0
 894:	55 1f       	adc	r21, r21
 896:	62 9f       	mul	r22, r18
 898:	f0 01       	movw	r30, r0
 89a:	72 9f       	mul	r23, r18
 89c:	bb 27       	eor	r27, r27
 89e:	f0 0d       	add	r31, r0
 8a0:	b1 1d       	adc	r27, r1
 8a2:	63 9f       	mul	r22, r19
 8a4:	aa 27       	eor	r26, r26
 8a6:	f0 0d       	add	r31, r0
 8a8:	b1 1d       	adc	r27, r1
 8aa:	aa 1f       	adc	r26, r26
 8ac:	64 9f       	mul	r22, r20
 8ae:	66 27       	eor	r22, r22
 8b0:	b0 0d       	add	r27, r0
 8b2:	a1 1d       	adc	r26, r1
 8b4:	66 1f       	adc	r22, r22
 8b6:	82 9f       	mul	r24, r18
 8b8:	22 27       	eor	r18, r18
 8ba:	b0 0d       	add	r27, r0
 8bc:	a1 1d       	adc	r26, r1
 8be:	62 1f       	adc	r22, r18
 8c0:	73 9f       	mul	r23, r19
 8c2:	b0 0d       	add	r27, r0
 8c4:	a1 1d       	adc	r26, r1
 8c6:	62 1f       	adc	r22, r18
 8c8:	83 9f       	mul	r24, r19
 8ca:	a0 0d       	add	r26, r0
 8cc:	61 1d       	adc	r22, r1
 8ce:	22 1f       	adc	r18, r18
 8d0:	74 9f       	mul	r23, r20
 8d2:	33 27       	eor	r19, r19
 8d4:	a0 0d       	add	r26, r0
 8d6:	61 1d       	adc	r22, r1
 8d8:	23 1f       	adc	r18, r19
 8da:	84 9f       	mul	r24, r20
 8dc:	60 0d       	add	r22, r0
 8de:	21 1d       	adc	r18, r1
 8e0:	82 2f       	mov	r24, r18
 8e2:	76 2f       	mov	r23, r22
 8e4:	6a 2f       	mov	r22, r26
 8e6:	11 24       	eor	r1, r1
 8e8:	9f 57       	subi	r25, 0x7F	; 127
 8ea:	50 40       	sbci	r21, 0x00	; 0
 8ec:	9a f0       	brmi	.+38     	; 0x914 <__mulsf3_pse+0x88>
 8ee:	f1 f0       	breq	.+60     	; 0x92c <__mulsf3_pse+0xa0>
 8f0:	88 23       	and	r24, r24
 8f2:	4a f0       	brmi	.+18     	; 0x906 <__mulsf3_pse+0x7a>
 8f4:	ee 0f       	add	r30, r30
 8f6:	ff 1f       	adc	r31, r31
 8f8:	bb 1f       	adc	r27, r27
 8fa:	66 1f       	adc	r22, r22
 8fc:	77 1f       	adc	r23, r23
 8fe:	88 1f       	adc	r24, r24
 900:	91 50       	subi	r25, 0x01	; 1
 902:	50 40       	sbci	r21, 0x00	; 0
 904:	a9 f7       	brne	.-22     	; 0x8f0 <__mulsf3_pse+0x64>
 906:	9e 3f       	cpi	r25, 0xFE	; 254
 908:	51 05       	cpc	r21, r1
 90a:	80 f0       	brcs	.+32     	; 0x92c <__mulsf3_pse+0xa0>
 90c:	0c 94 df 03 	jmp	0x7be	; 0x7be <__fp_inf>
 910:	0c 94 2a 04 	jmp	0x854	; 0x854 <__fp_szero>
 914:	5f 3f       	cpi	r21, 0xFF	; 255
 916:	e4 f3       	brlt	.-8      	; 0x910 <__mulsf3_pse+0x84>
 918:	98 3e       	cpi	r25, 0xE8	; 232
 91a:	d4 f3       	brlt	.-12     	; 0x910 <__mulsf3_pse+0x84>
 91c:	86 95       	lsr	r24
 91e:	77 95       	ror	r23
 920:	67 95       	ror	r22
 922:	b7 95       	ror	r27
 924:	f7 95       	ror	r31
 926:	e7 95       	ror	r30
 928:	9f 5f       	subi	r25, 0xFF	; 255
 92a:	c1 f7       	brne	.-16     	; 0x91c <__mulsf3_pse+0x90>
 92c:	fe 2b       	or	r31, r30
 92e:	88 0f       	add	r24, r24
 930:	91 1d       	adc	r25, r1
 932:	96 95       	lsr	r25
 934:	87 95       	ror	r24
 936:	97 f9       	bld	r25, 7
 938:	08 95       	ret

0000093a <__tablejump2__>:
 93a:	ee 0f       	add	r30, r30
 93c:	ff 1f       	adc	r31, r31
 93e:	05 90       	lpm	r0, Z+
 940:	f4 91       	lpm	r31, Z
 942:	e0 2d       	mov	r30, r0
 944:	09 94       	ijmp

00000946 <_exit>:
 946:	f8 94       	cli

00000948 <__stop_program>:
 948:	ff cf       	rjmp	.-2      	; 0x948 <__stop_program>
